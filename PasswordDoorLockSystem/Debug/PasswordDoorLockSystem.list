
PasswordDoorLockSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08002f6c  08002f6c  00012f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003188  08003188  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003188  08003188  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003188  08003188  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003188  08003188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800318c  0800318c  0001318c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800319c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800319c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001041  00000000  00000000  000251f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000438  00000000  00000000  00026238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  00026670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f013  00000000  00000000  00026a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005c6c  00000000  00000000  00045a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb1de  00000000  00000000  0004b69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010687d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f20  00000000  00000000  001068d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002f54 	.word	0x08002f54

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002f54 	.word	0x08002f54

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b098      	sub	sp, #96	; 0x60
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f001 fa31 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 fde7 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 fe2d 	bl	8000e40 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* Variables */

  int door_state;
  int counter = 0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  int pass_check = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	65bb      	str	r3, [r7, #88]	; 0x58
  int operation_check = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	657b      	str	r3, [r7, #84]	; 0x54
  char password_temp[4];
  char* key_temp;

  uint16_t memory_data;

  InitLCD(); //LCD Initialization
 80001f2:	f000 feda 	bl	8000faa <InitLCD>

  /* Starting Messages */

  lcd_data(1, 1, " EEM418 ");
 80001f6:	4ab8      	ldr	r2, [pc, #736]	; (80004d8 <main+0x304>)
 80001f8:	2101      	movs	r1, #1
 80001fa:	2001      	movs	r0, #1
 80001fc:	f000 ff98 	bl	8001130 <lcd_data>
  lcd_data(2, 1, " FINAL PROJECT ");
 8000200:	4ab6      	ldr	r2, [pc, #728]	; (80004dc <main+0x308>)
 8000202:	2101      	movs	r1, #1
 8000204:	2002      	movs	r0, #2
 8000206:	f000 ff93 	bl	8001130 <lcd_data>

  HAL_Delay(1000);
 800020a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020e:	f001 fa7d 	bl	800170c <HAL_Delay>

  lcd_data(1, 1, " PASSWORD  DOOR ");
 8000212:	4ab3      	ldr	r2, [pc, #716]	; (80004e0 <main+0x30c>)
 8000214:	2101      	movs	r1, #1
 8000216:	2001      	movs	r0, #1
 8000218:	f000 ff8a 	bl	8001130 <lcd_data>
  lcd_data(2, 1, " LOCK SYSTEM ");
 800021c:	4ab1      	ldr	r2, [pc, #708]	; (80004e4 <main+0x310>)
 800021e:	2101      	movs	r1, #1
 8000220:	2002      	movs	r0, #2
 8000222:	f000 ff85 	bl	8001130 <lcd_data>

  HAL_Delay(1000);
 8000226:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022a:	f001 fa6f 	bl	800170c <HAL_Delay>

  lcd_data(1, 1, "  YETKIN AKYUZ  ");
 800022e:	4aae      	ldr	r2, [pc, #696]	; (80004e8 <main+0x314>)
 8000230:	2101      	movs	r1, #1
 8000232:	2001      	movs	r0, #1
 8000234:	f000 ff7c 	bl	8001130 <lcd_data>
  lcd_data(2, 1, " BEYZANUR CELIK ");
 8000238:	4aac      	ldr	r2, [pc, #688]	; (80004ec <main+0x318>)
 800023a:	2101      	movs	r1, #1
 800023c:	2002      	movs	r0, #2
 800023e:	f000 ff77 	bl	8001130 <lcd_data>

  HAL_Delay(1000);
 8000242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000246:	f001 fa61 	bl	800170c <HAL_Delay>

  lcd_data(1, 1, "                ");
 800024a:	4aa9      	ldr	r2, [pc, #676]	; (80004f0 <main+0x31c>)
 800024c:	2101      	movs	r1, #1
 800024e:	2001      	movs	r0, #1
 8000250:	f000 ff6e 	bl	8001130 <lcd_data>
  lcd_data(2, 1, "                ");
 8000254:	4aa6      	ldr	r2, [pc, #664]	; (80004f0 <main+0x31c>)
 8000256:	2101      	movs	r1, #1
 8000258:	2002      	movs	r0, #2
 800025a:	f000 ff69 	bl	8001130 <lcd_data>

  HAL_Delay(500);
 800025e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000262:	f001 fa53 	bl	800170c <HAL_Delay>

  /* First use check */

  //Get data from 0x0801FC08. This address contains door lock state data.
  memory_data = Flash_Read(memory_address + 8);
 8000266:	48a3      	ldr	r0, [pc, #652]	; (80004f4 <main+0x320>)
 8000268:	f001 f94a 	bl	8001500 <Flash_Read>
 800026c:	4603      	mov	r3, r0
 800026e:	82fb      	strh	r3, [r7, #22]
  door_state = memory_data;
 8000270:	8afb      	ldrh	r3, [r7, #22]
 8000272:	613b      	str	r3, [r7, #16]

  //If the memory address is empty (0xFFFF), the system is using for first time.
  //Defining a password is required.
  //This process works only once.
  if (door_state == 0xFFFF)
 8000274:	693b      	ldr	r3, [r7, #16]
 8000276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800027a:	4293      	cmp	r3, r2
 800027c:	f040 80c2 	bne.w	8000404 <main+0x230>
  {
	  while (1)
	  {
		  lcd_data(1, 1, "DEFINE YOUR ");
 8000280:	4a9d      	ldr	r2, [pc, #628]	; (80004f8 <main+0x324>)
 8000282:	2101      	movs	r1, #1
 8000284:	2001      	movs	r0, #1
 8000286:	f000 ff53 	bl	8001130 <lcd_data>
		  lcd_data(2, 1, "PASSWORD: ");
 800028a:	4a9c      	ldr	r2, [pc, #624]	; (80004fc <main+0x328>)
 800028c:	2101      	movs	r1, #1
 800028e:	2002      	movs	r0, #2
 8000290:	f000 ff4e 	bl	8001130 <lcd_data>

		  counter = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	65fb      	str	r3, [r7, #92]	; 0x5c

		  while(1)
		  {
			  key = keypad_scanner(); //Get char from keypad.
 8000298:	f000 ff74 	bl	8001184 <keypad_scanner>
 800029c:	4603      	mov	r3, r0
 800029e:	73fb      	strb	r3, [r7, #15]

			  //Write keypad inputs to password_temp variable until there are 4 character inputs from keypad.
			  if (counter <= 3 && key != 'n' && key != '#' && key != '*')
 80002a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80002a2:	2b03      	cmp	r3, #3
 80002a4:	dc28      	bgt.n	80002f8 <main+0x124>
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
 80002a8:	2b6e      	cmp	r3, #110	; 0x6e
 80002aa:	d025      	beq.n	80002f8 <main+0x124>
 80002ac:	7bfb      	ldrb	r3, [r7, #15]
 80002ae:	2b23      	cmp	r3, #35	; 0x23
 80002b0:	d022      	beq.n	80002f8 <main+0x124>
 80002b2:	7bfb      	ldrb	r3, [r7, #15]
 80002b4:	2b2a      	cmp	r3, #42	; 0x2a
 80002b6:	d01f      	beq.n	80002f8 <main+0x124>
			  {
				  key_temp = key;
 80002b8:	7bfb      	ldrb	r3, [r7, #15]
 80002ba:	603b      	str	r3, [r7, #0]
				  password_temp[counter] = key;
 80002bc:	1d3a      	adds	r2, r7, #4
 80002be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80002c0:	4413      	add	r3, r2
 80002c2:	7bfa      	ldrb	r2, [r7, #15]
 80002c4:	701a      	strb	r2, [r3, #0]

				  lcd_data(2, 11 + counter, &key_temp);
 80002c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	330b      	adds	r3, #11
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	463a      	mov	r2, r7
 80002d0:	4619      	mov	r1, r3
 80002d2:	2002      	movs	r0, #2
 80002d4:	f000 ff2c 	bl	8001130 <lcd_data>
				  HAL_Delay(200);
 80002d8:	20c8      	movs	r0, #200	; 0xc8
 80002da:	f001 fa17 	bl	800170c <HAL_Delay>
				  lcd_data(2, 11 + counter, "*");
 80002de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	330b      	adds	r3, #11
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	4a86      	ldr	r2, [pc, #536]	; (8000500 <main+0x32c>)
 80002e8:	4619      	mov	r1, r3
 80002ea:	2002      	movs	r0, #2
 80002ec:	f000 ff20 	bl	8001130 <lcd_data>

				  counter++;
 80002f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80002f2:	3301      	adds	r3, #1
 80002f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80002f6:	e084      	b.n	8000402 <main+0x22e>
			  }

			  //If input length is 4 and pressed the # button
			  else if (counter > 3 && key == '#')
 80002f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	ddcc      	ble.n	8000298 <main+0xc4>
 80002fe:	7bfb      	ldrb	r3, [r7, #15]
 8000300:	2b23      	cmp	r3, #35	; 0x23
 8000302:	d1c9      	bne.n	8000298 <main+0xc4>
			  {
				  counter = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	65fb      	str	r3, [r7, #92]	; 0x5c

				  //Erase memory
				  Flash_Erase(memory_address);
 8000308:	487e      	ldr	r0, [pc, #504]	; (8000504 <main+0x330>)
 800030a:	f001 f897 	bl	800143c <Flash_Erase>

				  //Write defined password to memory
				  for (int i = 0; i < 4; i++)
 800030e:	2300      	movs	r3, #0
 8000310:	653b      	str	r3, [r7, #80]	; 0x50
 8000312:	e026      	b.n	8000362 <main+0x18e>
				  {
					  memory_data = (uint16_t *)password_temp[i];
 8000314:	1d3a      	adds	r2, r7, #4
 8000316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000318:	4413      	add	r3, r2
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	82fb      	strh	r3, [r7, #22]

					  Flash_Write(memory_address + i * 2, memory_data);
 800031e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000320:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8000324:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	461a      	mov	r2, r3
 800032c:	8afb      	ldrh	r3, [r7, #22]
 800032e:	4619      	mov	r1, r3
 8000330:	4610      	mov	r0, r2
 8000332:	f001 f8b9 	bl	80014a8 <Flash_Write>
					  memory_data = Flash_Read(memory_address + i * 2);
 8000336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000338:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800033c:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	4618      	mov	r0, r3
 8000344:	f001 f8dc 	bl	8001500 <Flash_Read>
 8000348:	4603      	mov	r3, r0
 800034a:	82fb      	strh	r3, [r7, #22]
					  password [i] = memory_data;
 800034c:	8afb      	ldrh	r3, [r7, #22]
 800034e:	b2d9      	uxtb	r1, r3
 8000350:	f107 0208 	add.w	r2, r7, #8
 8000354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000356:	4413      	add	r3, r2
 8000358:	460a      	mov	r2, r1
 800035a:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 4; i++)
 800035c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800035e:	3301      	adds	r3, #1
 8000360:	653b      	str	r3, [r7, #80]	; 0x50
 8000362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000364:	2b03      	cmp	r3, #3
 8000366:	ddd5      	ble.n	8000314 <main+0x140>
				  }

				  //Write door lock state to memory: (10) Door is open, (20) Door is locked.
				  Flash_Write(memory_address + 8, 10);
 8000368:	210a      	movs	r1, #10
 800036a:	4862      	ldr	r0, [pc, #392]	; (80004f4 <main+0x320>)
 800036c:	f001 f89c 	bl	80014a8 <Flash_Write>

				  /* Done! */

				  HAL_GPIO_WritePin(GPIOA, LD_GREEN_Pin, 1);
 8000370:	2201      	movs	r2, #1
 8000372:	2101      	movs	r1, #1
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f001 fc74 	bl	8001c64 <HAL_GPIO_WritePin>

				  lcd_data(1, 1, " DONE ");
 800037c:	4a62      	ldr	r2, [pc, #392]	; (8000508 <main+0x334>)
 800037e:	2101      	movs	r1, #1
 8000380:	2001      	movs	r0, #1
 8000382:	f000 fed5 	bl	8001130 <lcd_data>
				  lcd_data(2, 1, "PASSWORD: ");
 8000386:	4a5d      	ldr	r2, [pc, #372]	; (80004fc <main+0x328>)
 8000388:	2101      	movs	r1, #1
 800038a:	2002      	movs	r0, #2
 800038c:	f000 fed0 	bl	8001130 <lcd_data>

				  //Print defined password, wait a second, print **** instead of the password.
				  for (int i = 0; i < 4; i++)
 8000390:	2300      	movs	r3, #0
 8000392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000394:	e011      	b.n	80003ba <main+0x1e6>
				  {
					  key_temp = password[i];
 8000396:	f107 0208 	add.w	r2, r7, #8
 800039a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800039c:	4413      	add	r3, r2
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	603b      	str	r3, [r7, #0]
					  lcd_data(2, 11 + i, &key_temp);
 80003a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	330b      	adds	r3, #11
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	463a      	mov	r2, r7
 80003ac:	4619      	mov	r1, r3
 80003ae:	2002      	movs	r0, #2
 80003b0:	f000 febe 	bl	8001130 <lcd_data>
				  for (int i = 0; i < 4; i++)
 80003b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003b6:	3301      	adds	r3, #1
 80003b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80003ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003bc:	2b03      	cmp	r3, #3
 80003be:	ddea      	ble.n	8000396 <main+0x1c2>
				  }

				  HAL_Delay(1000);
 80003c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c4:	f001 f9a2 	bl	800170c <HAL_Delay>

				  for (int i = 0; i < 4; i++)
 80003c8:	2300      	movs	r3, #0
 80003ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80003cc:	e00b      	b.n	80003e6 <main+0x212>
				  {
					  lcd_data(2, 11 + i, "*");
 80003ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	330b      	adds	r3, #11
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	4a4a      	ldr	r2, [pc, #296]	; (8000500 <main+0x32c>)
 80003d8:	4619      	mov	r1, r3
 80003da:	2002      	movs	r0, #2
 80003dc:	f000 fea8 	bl	8001130 <lcd_data>
				  for (int i = 0; i < 4; i++)
 80003e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003e2:	3301      	adds	r3, #1
 80003e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80003e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003e8:	2b03      	cmp	r3, #3
 80003ea:	ddf0      	ble.n	80003ce <main+0x1fa>
				  }

				  HAL_Delay(200);
 80003ec:	20c8      	movs	r0, #200	; 0xc8
 80003ee:	f001 f98d 	bl	800170c <HAL_Delay>

				  HAL_GPIO_WritePin(GPIOA, LD_GREEN_Pin, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2101      	movs	r1, #1
 80003f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fa:	f001 fc33 	bl	8001c64 <HAL_GPIO_WritePin>

				  break;
 80003fe:	bf00      	nop
			  }
		  }

		  break;
 8000400:	e000      	b.n	8000404 <main+0x230>
			  key = keypad_scanner(); //Get char from keypad.
 8000402:	e749      	b.n	8000298 <main+0xc4>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_data(1, 1, "                ");
 8000404:	4a3a      	ldr	r2, [pc, #232]	; (80004f0 <main+0x31c>)
 8000406:	2101      	movs	r1, #1
 8000408:	2001      	movs	r0, #1
 800040a:	f000 fe91 	bl	8001130 <lcd_data>
	  lcd_data(2, 1, "                ");
 800040e:	4a38      	ldr	r2, [pc, #224]	; (80004f0 <main+0x31c>)
 8000410:	2101      	movs	r1, #1
 8000412:	2002      	movs	r0, #2
 8000414:	f000 fe8c 	bl	8001130 <lcd_data>

	  /* If door is locked: (10) Door is open, (20) Door is locked. */

	  while (Flash_Read(memory_address + 8) == 20)
 8000418:	e12d      	b.n	8000676 <main+0x4a2>
	  {
		  lcd_data(1, 1, "STATUS: LOCKED ");
 800041a:	4a3c      	ldr	r2, [pc, #240]	; (800050c <main+0x338>)
 800041c:	2101      	movs	r1, #1
 800041e:	2001      	movs	r0, #1
 8000420:	f000 fe86 	bl	8001130 <lcd_data>
		  lcd_data(2, 1, "PRESS ANY BUTTON");
 8000424:	4a3a      	ldr	r2, [pc, #232]	; (8000510 <main+0x33c>)
 8000426:	2101      	movs	r1, #1
 8000428:	2002      	movs	r0, #2
 800042a:	f000 fe81 	bl	8001130 <lcd_data>

		  //Wait till when any key on keypad is pressed.
		  while (keypad_scanner() == 'n');
 800042e:	bf00      	nop
 8000430:	f000 fea8 	bl	8001184 <keypad_scanner>
 8000434:	4603      	mov	r3, r0
 8000436:	2b6e      	cmp	r3, #110	; 0x6e
 8000438:	d0fa      	beq.n	8000430 <main+0x25c>

		  //Till when door is opened.
		  while(Flash_Read(memory_address + 8) == 20)
 800043a:	e115      	b.n	8000668 <main+0x494>
		  {
			  lcd_data(1, 1, "STATUS: LOCKED ");
 800043c:	4a33      	ldr	r2, [pc, #204]	; (800050c <main+0x338>)
 800043e:	2101      	movs	r1, #1
 8000440:	2001      	movs	r0, #1
 8000442:	f000 fe75 	bl	8001130 <lcd_data>
			  lcd_data(2, 1, "PASSWORD: ");
 8000446:	4a2d      	ldr	r2, [pc, #180]	; (80004fc <main+0x328>)
 8000448:	2101      	movs	r1, #1
 800044a:	2002      	movs	r0, #2
 800044c:	f000 fe70 	bl	8001130 <lcd_data>
			  lcd_data(2, 10, " ");
 8000450:	4a30      	ldr	r2, [pc, #192]	; (8000514 <main+0x340>)
 8000452:	210a      	movs	r1, #10
 8000454:	2002      	movs	r0, #2
 8000456:	f000 fe6b 	bl	8001130 <lcd_data>

			  while(1)
			  {
				  key = keypad_scanner(); //Get char from keypad.
 800045a:	f000 fe93 	bl	8001184 <keypad_scanner>
 800045e:	4603      	mov	r3, r0
 8000460:	73fb      	strb	r3, [r7, #15]

				  if (counter <= 3 && key != '*' && key != '#' && key != 'n')
 8000462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000464:	2b03      	cmp	r3, #3
 8000466:	dc28      	bgt.n	80004ba <main+0x2e6>
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	2b2a      	cmp	r3, #42	; 0x2a
 800046c:	d025      	beq.n	80004ba <main+0x2e6>
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	2b23      	cmp	r3, #35	; 0x23
 8000472:	d022      	beq.n	80004ba <main+0x2e6>
 8000474:	7bfb      	ldrb	r3, [r7, #15]
 8000476:	2b6e      	cmp	r3, #110	; 0x6e
 8000478:	d01f      	beq.n	80004ba <main+0x2e6>
				  {
					  key_temp = key;
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	603b      	str	r3, [r7, #0]

					  lcd_data(2, 11 + counter, &key_temp);
 800047e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000480:	b2db      	uxtb	r3, r3
 8000482:	330b      	adds	r3, #11
 8000484:	b2db      	uxtb	r3, r3
 8000486:	463a      	mov	r2, r7
 8000488:	4619      	mov	r1, r3
 800048a:	2002      	movs	r0, #2
 800048c:	f000 fe50 	bl	8001130 <lcd_data>

					  HAL_Delay(200);
 8000490:	20c8      	movs	r0, #200	; 0xc8
 8000492:	f001 f93b 	bl	800170c <HAL_Delay>

					  lcd_data(2, 11 + counter, "*");
 8000496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000498:	b2db      	uxtb	r3, r3
 800049a:	330b      	adds	r3, #11
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4a18      	ldr	r2, [pc, #96]	; (8000500 <main+0x32c>)
 80004a0:	4619      	mov	r1, r3
 80004a2:	2002      	movs	r0, #2
 80004a4:	f000 fe44 	bl	8001130 <lcd_data>

					  password_temp[counter] = key;
 80004a8:	1d3a      	adds	r2, r7, #4
 80004aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80004ac:	4413      	add	r3, r2
 80004ae:	7bfa      	ldrb	r2, [r7, #15]
 80004b0:	701a      	strb	r2, [r3, #0]

					  counter++;
 80004b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80004b4:	3301      	adds	r3, #1
 80004b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80004b8:	e0d5      	b.n	8000666 <main+0x492>
				  }

				  //Write keypad inputs to password_temp variable until there are 4 character inputs from keypad.
				  else if (counter > 3 && key == '#')
 80004ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80004bc:	2b03      	cmp	r3, #3
 80004be:	f340 80cb 	ble.w	8000658 <main+0x484>
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
 80004c4:	2b23      	cmp	r3, #35	; 0x23
 80004c6:	f040 80c7 	bne.w	8000658 <main+0x484>
				  {
					  counter = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	65fb      	str	r3, [r7, #92]	; 0x5c
					  pass_check = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	65bb      	str	r3, [r7, #88]	; 0x58

					  //In turn, compare each digit with the password, if the numbers match, increase pass_check by one.
					  for (int i = 0; i < 4; i++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	647b      	str	r3, [r7, #68]	; 0x44
 80004d6:	e043      	b.n	8000560 <main+0x38c>
 80004d8:	08002f6c 	.word	0x08002f6c
 80004dc:	08002f78 	.word	0x08002f78
 80004e0:	08002f88 	.word	0x08002f88
 80004e4:	08002f9c 	.word	0x08002f9c
 80004e8:	08002fac 	.word	0x08002fac
 80004ec:	08002fc0 	.word	0x08002fc0
 80004f0:	08002fd4 	.word	0x08002fd4
 80004f4:	0801fc08 	.word	0x0801fc08
 80004f8:	08002fe8 	.word	0x08002fe8
 80004fc:	08002ff8 	.word	0x08002ff8
 8000500:	08003004 	.word	0x08003004
 8000504:	0801fc00 	.word	0x0801fc00
 8000508:	08003008 	.word	0x08003008
 800050c:	08003010 	.word	0x08003010
 8000510:	08003020 	.word	0x08003020
 8000514:	08003034 	.word	0x08003034
					  {
						  memory_data = Flash_Read(memory_address + i*2);
 8000518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800051a:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800051e:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	4618      	mov	r0, r3
 8000526:	f000 ffeb 	bl	8001500 <Flash_Read>
 800052a:	4603      	mov	r3, r0
 800052c:	82fb      	strh	r3, [r7, #22]
						  password[i] = memory_data;
 800052e:	8afb      	ldrh	r3, [r7, #22]
 8000530:	b2d9      	uxtb	r1, r3
 8000532:	f107 0208 	add.w	r2, r7, #8
 8000536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000538:	4413      	add	r3, r2
 800053a:	460a      	mov	r2, r1
 800053c:	701a      	strb	r2, [r3, #0]

						  if (password[i] == password_temp[i])
 800053e:	f107 0208 	add.w	r2, r7, #8
 8000542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000544:	4413      	add	r3, r2
 8000546:	781a      	ldrb	r2, [r3, #0]
 8000548:	1d39      	adds	r1, r7, #4
 800054a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800054c:	440b      	add	r3, r1
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	429a      	cmp	r2, r3
 8000552:	d102      	bne.n	800055a <main+0x386>
						  {
							  pass_check++;
 8000554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000556:	3301      	adds	r3, #1
 8000558:	65bb      	str	r3, [r7, #88]	; 0x58
					  for (int i = 0; i < 4; i++)
 800055a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800055c:	3301      	adds	r3, #1
 800055e:	647b      	str	r3, [r7, #68]	; 0x44
 8000560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000562:	2b03      	cmp	r3, #3
 8000564:	ddd8      	ble.n	8000518 <main+0x344>
						  }
					  }

					  //Save password data from memory to password_temp due to avoid data loss
					  for (int i = 0; i < 4; i++)
 8000566:	2300      	movs	r3, #0
 8000568:	643b      	str	r3, [r7, #64]	; 0x40
 800056a:	e014      	b.n	8000596 <main+0x3c2>
					  {
						  memory_data = Flash_Read(memory_address + i*2);
 800056c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800056e:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8000572:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	4618      	mov	r0, r3
 800057a:	f000 ffc1 	bl	8001500 <Flash_Read>
 800057e:	4603      	mov	r3, r0
 8000580:	82fb      	strh	r3, [r7, #22]
						  password_temp[i] = memory_data;
 8000582:	8afb      	ldrh	r3, [r7, #22]
 8000584:	b2d9      	uxtb	r1, r3
 8000586:	1d3a      	adds	r2, r7, #4
 8000588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800058a:	4413      	add	r3, r2
 800058c:	460a      	mov	r2, r1
 800058e:	701a      	strb	r2, [r3, #0]
					  for (int i = 0; i < 4; i++)
 8000590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000592:	3301      	adds	r3, #1
 8000594:	643b      	str	r3, [r7, #64]	; 0x40
 8000596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000598:	2b03      	cmp	r3, #3
 800059a:	dde7      	ble.n	800056c <main+0x398>
					  }

					  //Erase memory
					  Flash_Erase(memory_address);
 800059c:	48bb      	ldr	r0, [pc, #748]	; (800088c <main+0x6b8>)
 800059e:	f000 ff4d 	bl	800143c <Flash_Erase>

					  //Write password data from password_temp to memory
					  for (int i = 0; i < 4; i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005a6:	e013      	b.n	80005d0 <main+0x3fc>
					  {
						  memory_data = (uint16_t *)password_temp[i];
 80005a8:	1d3a      	adds	r2, r7, #4
 80005aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	82fb      	strh	r3, [r7, #22]
						  Flash_Write(memory_address + i*2, memory_data);
 80005b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005b4:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 80005b8:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	461a      	mov	r2, r3
 80005c0:	8afb      	ldrh	r3, [r7, #22]
 80005c2:	4619      	mov	r1, r3
 80005c4:	4610      	mov	r0, r2
 80005c6:	f000 ff6f 	bl	80014a8 <Flash_Write>
					  for (int i = 0; i < 4; i++)
 80005ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005cc:	3301      	adds	r3, #1
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	dde8      	ble.n	80005a8 <main+0x3d4>
					  }

					  //If the passwords match
					  if (pass_check > 3)
 80005d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005d8:	2b03      	cmp	r3, #3
 80005da:	dd1e      	ble.n	800061a <main+0x446>
					  {
						  //Write door is open info to memory
						  Flash_Write(memory_address + 8, 10);
 80005dc:	210a      	movs	r1, #10
 80005de:	48ac      	ldr	r0, [pc, #688]	; (8000890 <main+0x6bc>)
 80005e0:	f000 ff62 	bl	80014a8 <Flash_Write>

						  /* Done! */

						  HAL_GPIO_WritePin(GPIOA, LD_GREEN_Pin, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2101      	movs	r1, #1
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f001 fb3a 	bl	8001c64 <HAL_GPIO_WritePin>

						  lcd_data(1, 1, " PASSWORD MATCH ");
 80005f0:	4aa8      	ldr	r2, [pc, #672]	; (8000894 <main+0x6c0>)
 80005f2:	2101      	movs	r1, #1
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 fd9b 	bl	8001130 <lcd_data>
						  lcd_data(2, 1, " OPENING DOOR ");
 80005fa:	4aa7      	ldr	r2, [pc, #668]	; (8000898 <main+0x6c4>)
 80005fc:	2101      	movs	r1, #1
 80005fe:	2002      	movs	r0, #2
 8000600:	f000 fd96 	bl	8001130 <lcd_data>

						  HAL_Delay(1500);
 8000604:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000608:	f001 f880 	bl	800170c <HAL_Delay>

						  HAL_GPIO_WritePin(GPIOA, LD_GREEN_Pin, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2101      	movs	r1, #1
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f001 fb26 	bl	8001c64 <HAL_GPIO_WritePin>

						  break;
 8000618:	e026      	b.n	8000668 <main+0x494>
					  }

					  //If the passwords do not match
					  else
					  {
						  Flash_Write(memory_address + 8, 20);
 800061a:	2114      	movs	r1, #20
 800061c:	489c      	ldr	r0, [pc, #624]	; (8000890 <main+0x6bc>)
 800061e:	f000 ff43 	bl	80014a8 <Flash_Write>

						  HAL_GPIO_WritePin(GPIOA, LD_RED_Pin, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2102      	movs	r1, #2
 8000626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062a:	f001 fb1b 	bl	8001c64 <HAL_GPIO_WritePin>

						  lcd_data(1, 1, " WRONG PASSWORD ");
 800062e:	4a9b      	ldr	r2, [pc, #620]	; (800089c <main+0x6c8>)
 8000630:	2101      	movs	r1, #1
 8000632:	2001      	movs	r0, #1
 8000634:	f000 fd7c 	bl	8001130 <lcd_data>
						  lcd_data(2, 1, " ACCESS DENIED ");
 8000638:	4a99      	ldr	r2, [pc, #612]	; (80008a0 <main+0x6cc>)
 800063a:	2101      	movs	r1, #1
 800063c:	2002      	movs	r0, #2
 800063e:	f000 fd77 	bl	8001130 <lcd_data>

						  HAL_Delay(1000);
 8000642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000646:	f001 f861 	bl	800170c <HAL_Delay>

						  HAL_GPIO_WritePin(GPIOA, LD_RED_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2102      	movs	r1, #2
 800064e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000652:	f001 fb07 	bl	8001c64 <HAL_GPIO_WritePin>

						  break;
 8000656:	e007      	b.n	8000668 <main+0x494>
					  }
				  }

				  //If * key is pressed, clean the password field.
				  else if (key == '*')
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	2b2a      	cmp	r3, #42	; 0x2a
 800065c:	f47f aefd 	bne.w	800045a <main+0x286>
				  {
					  counter = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	65fb      	str	r3, [r7, #92]	; 0x5c

					  break;
 8000664:	e000      	b.n	8000668 <main+0x494>
				  key = keypad_scanner(); //Get char from keypad.
 8000666:	e6f8      	b.n	800045a <main+0x286>
		  while(Flash_Read(memory_address + 8) == 20)
 8000668:	4889      	ldr	r0, [pc, #548]	; (8000890 <main+0x6bc>)
 800066a:	f000 ff49 	bl	8001500 <Flash_Read>
 800066e:	4603      	mov	r3, r0
 8000670:	2b14      	cmp	r3, #20
 8000672:	f43f aee3 	beq.w	800043c <main+0x268>
	  while (Flash_Read(memory_address + 8) == 20)
 8000676:	4886      	ldr	r0, [pc, #536]	; (8000890 <main+0x6bc>)
 8000678:	f000 ff42 	bl	8001500 <Flash_Read>
 800067c:	4603      	mov	r3, r0
 800067e:	2b14      	cmp	r3, #20
 8000680:	f43f aecb 	beq.w	800041a <main+0x246>
	  	  }
	  }

	  /* If door is open: (10) Door is open, (20) Door is locked. */

	  while (Flash_Read(memory_address + 8) == 10)
 8000684:	e375      	b.n	8000d72 <main+0xb9e>
	  {
		  key = keypad_scanner(); //Get char from keypad.
 8000686:	f000 fd7d 	bl	8001184 <keypad_scanner>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]

		  //If # button is pressed, Lock the door selection.
		  if (key == '#')
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b23      	cmp	r3, #35	; 0x23
 8000692:	f040 813b 	bne.w	800090c <main+0x738>
		  {
			  counter = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	65fb      	str	r3, [r7, #92]	; 0x5c
			  operation_check = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	657b      	str	r3, [r7, #84]	; 0x54

			  lcd_data(1, 1, "               ");
 800069e:	4a81      	ldr	r2, [pc, #516]	; (80008a4 <main+0x6d0>)
 80006a0:	2101      	movs	r1, #1
 80006a2:	2001      	movs	r0, #1
 80006a4:	f000 fd44 	bl	8001130 <lcd_data>
			  lcd_data(2, 1, "               ");
 80006a8:	4a7e      	ldr	r2, [pc, #504]	; (80008a4 <main+0x6d0>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	2002      	movs	r0, #2
 80006ae:	f000 fd3f 	bl	8001130 <lcd_data>

			  while(!operation_check)
 80006b2:	e126      	b.n	8000902 <main+0x72e>
			  {
				  lcd_data(1, 1, "LOCK THE DOOR   ");
 80006b4:	4a7c      	ldr	r2, [pc, #496]	; (80008a8 <main+0x6d4>)
 80006b6:	2101      	movs	r1, #1
 80006b8:	2001      	movs	r0, #1
 80006ba:	f000 fd39 	bl	8001130 <lcd_data>
				  lcd_data(2, 1, "PASSWORD: ");
 80006be:	4a7b      	ldr	r2, [pc, #492]	; (80008ac <main+0x6d8>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	2002      	movs	r0, #2
 80006c4:	f000 fd34 	bl	8001130 <lcd_data>

				  /* Password Check */

				  if (counter <= 3 && key != '*' && key != '#' && key != 'n')
 80006c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	dc2d      	bgt.n	800072a <main+0x556>
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	2b2a      	cmp	r3, #42	; 0x2a
 80006d2:	d02a      	beq.n	800072a <main+0x556>
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	2b23      	cmp	r3, #35	; 0x23
 80006d8:	d027      	beq.n	800072a <main+0x556>
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	2b6e      	cmp	r3, #110	; 0x6e
 80006de:	d024      	beq.n	800072a <main+0x556>
				  {
					  key_temp = key;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	603b      	str	r3, [r7, #0]
					  password_temp[counter] = key;
 80006e4:	1d3a      	adds	r2, r7, #4
 80006e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006e8:	4413      	add	r3, r2
 80006ea:	7bfa      	ldrb	r2, [r7, #15]
 80006ec:	701a      	strb	r2, [r3, #0]

					  lcd_data(2, 11 + counter, &key_temp);
 80006ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	330b      	adds	r3, #11
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	463a      	mov	r2, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	2002      	movs	r0, #2
 80006fc:	f000 fd18 	bl	8001130 <lcd_data>

					  HAL_Delay(200);
 8000700:	20c8      	movs	r0, #200	; 0xc8
 8000702:	f001 f803 	bl	800170c <HAL_Delay>

					  lcd_data(2, 11 + counter, "*");
 8000706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000708:	b2db      	uxtb	r3, r3
 800070a:	330b      	adds	r3, #11
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4a68      	ldr	r2, [pc, #416]	; (80008b0 <main+0x6dc>)
 8000710:	4619      	mov	r1, r3
 8000712:	2002      	movs	r0, #2
 8000714:	f000 fd0c 	bl	8001130 <lcd_data>

					  password_temp[counter] = key;
 8000718:	1d3a      	adds	r2, r7, #4
 800071a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800071c:	4413      	add	r3, r2
 800071e:	7bfa      	ldrb	r2, [r7, #15]
 8000720:	701a      	strb	r2, [r3, #0]

					  counter++;
 8000722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000724:	3301      	adds	r3, #1
 8000726:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000728:	e0eb      	b.n	8000902 <main+0x72e>
				  }

				  else if (counter > 3 && key == '#')
 800072a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800072c:	2b03      	cmp	r3, #3
 800072e:	f340 80c5 	ble.w	80008bc <main+0x6e8>
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	2b23      	cmp	r3, #35	; 0x23
 8000736:	f040 80c1 	bne.w	80008bc <main+0x6e8>
				  {
					  counter = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	65fb      	str	r3, [r7, #92]	; 0x5c
					  pass_check = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	65bb      	str	r3, [r7, #88]	; 0x58

					  for (int i = 0; i < 4; i++)
 8000742:	2300      	movs	r3, #0
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
 8000746:	e023      	b.n	8000790 <main+0x5bc>
					  {
						  memory_data = Flash_Read(memory_address + i*2);
 8000748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800074a:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800074e:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fed3 	bl	8001500 <Flash_Read>
 800075a:	4603      	mov	r3, r0
 800075c:	82fb      	strh	r3, [r7, #22]
						  password[i] = memory_data;
 800075e:	8afb      	ldrh	r3, [r7, #22]
 8000760:	b2d9      	uxtb	r1, r3
 8000762:	f107 0208 	add.w	r2, r7, #8
 8000766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000768:	4413      	add	r3, r2
 800076a:	460a      	mov	r2, r1
 800076c:	701a      	strb	r2, [r3, #0]

						  if (password[i] == password_temp[i])
 800076e:	f107 0208 	add.w	r2, r7, #8
 8000772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000774:	4413      	add	r3, r2
 8000776:	781a      	ldrb	r2, [r3, #0]
 8000778:	1d39      	adds	r1, r7, #4
 800077a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800077c:	440b      	add	r3, r1
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d102      	bne.n	800078a <main+0x5b6>
						  {
							  pass_check++;
 8000784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000786:	3301      	adds	r3, #1
 8000788:	65bb      	str	r3, [r7, #88]	; 0x58
					  for (int i = 0; i < 4; i++)
 800078a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800078c:	3301      	adds	r3, #1
 800078e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000792:	2b03      	cmp	r3, #3
 8000794:	ddd8      	ble.n	8000748 <main+0x574>
						  }
					  }

					  for (int i = 0; i < 4; i++)
 8000796:	2300      	movs	r3, #0
 8000798:	637b      	str	r3, [r7, #52]	; 0x34
 800079a:	e014      	b.n	80007c6 <main+0x5f2>
					  {
						  memory_data = Flash_Read(memory_address + i*2);
 800079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079e:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 80007a2:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 fea9 	bl	8001500 <Flash_Read>
 80007ae:	4603      	mov	r3, r0
 80007b0:	82fb      	strh	r3, [r7, #22]
						  password_temp[i] = memory_data;
 80007b2:	8afb      	ldrh	r3, [r7, #22]
 80007b4:	b2d9      	uxtb	r1, r3
 80007b6:	1d3a      	adds	r2, r7, #4
 80007b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
					  for (int i = 0; i < 4; i++)
 80007c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c2:	3301      	adds	r3, #1
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
 80007c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	dde7      	ble.n	800079c <main+0x5c8>
					  }

					  Flash_Erase(memory_address);
 80007cc:	482f      	ldr	r0, [pc, #188]	; (800088c <main+0x6b8>)
 80007ce:	f000 fe35 	bl	800143c <Flash_Erase>

					  for (int i = 0; i < 4; i++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	633b      	str	r3, [r7, #48]	; 0x30
 80007d6:	e013      	b.n	8000800 <main+0x62c>
					  {
						  memory_data = (uint16_t *)password_temp[i];
 80007d8:	1d3a      	adds	r2, r7, #4
 80007da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	82fb      	strh	r3, [r7, #22]
						  Flash_Write(memory_address + i*2, memory_data);
 80007e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e4:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 80007e8:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	461a      	mov	r2, r3
 80007f0:	8afb      	ldrh	r3, [r7, #22]
 80007f2:	4619      	mov	r1, r3
 80007f4:	4610      	mov	r0, r2
 80007f6:	f000 fe57 	bl	80014a8 <Flash_Write>
					  for (int i = 0; i < 4; i++)
 80007fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007fc:	3301      	adds	r3, #1
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
 8000800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000802:	2b03      	cmp	r3, #3
 8000804:	dde8      	ble.n	80007d8 <main+0x604>
					  }

					  if (pass_check > 3)
 8000806:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000808:	2b03      	cmp	r3, #3
 800080a:	dd20      	ble.n	800084e <main+0x67a>
					  {
						  Flash_Write(memory_address + 8, 20);
 800080c:	2114      	movs	r1, #20
 800080e:	4820      	ldr	r0, [pc, #128]	; (8000890 <main+0x6bc>)
 8000810:	f000 fe4a 	bl	80014a8 <Flash_Write>

						  HAL_GPIO_WritePin(GPIOA, LD_GREEN_Pin, 1);
 8000814:	2201      	movs	r2, #1
 8000816:	2101      	movs	r1, #1
 8000818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081c:	f001 fa22 	bl	8001c64 <HAL_GPIO_WritePin>

						  lcd_data(1, 1, " PASSWORD MATCH ");
 8000820:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <main+0x6c0>)
 8000822:	2101      	movs	r1, #1
 8000824:	2001      	movs	r0, #1
 8000826:	f000 fc83 	bl	8001130 <lcd_data>
						  lcd_data(2, 1, "  LOCKING DOOR  ");
 800082a:	4a22      	ldr	r2, [pc, #136]	; (80008b4 <main+0x6e0>)
 800082c:	2101      	movs	r1, #1
 800082e:	2002      	movs	r0, #2
 8000830:	f000 fc7e 	bl	8001130 <lcd_data>

						  HAL_Delay(1500);
 8000834:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000838:	f000 ff68 	bl	800170c <HAL_Delay>

						  HAL_GPIO_WritePin(GPIOA, LD_GREEN_Pin, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2101      	movs	r1, #1
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f001 fa0e 	bl	8001c64 <HAL_GPIO_WritePin>

						  operation_check = 1;
 8000848:	2301      	movs	r3, #1
 800084a:	657b      	str	r3, [r7, #84]	; 0x54
 800084c:	e059      	b.n	8000902 <main+0x72e>
					  }

					  else
					  {
						  Flash_Write(memory_address + 8, 10);
 800084e:	210a      	movs	r1, #10
 8000850:	480f      	ldr	r0, [pc, #60]	; (8000890 <main+0x6bc>)
 8000852:	f000 fe29 	bl	80014a8 <Flash_Write>

						  HAL_GPIO_WritePin(GPIOA, LD_RED_Pin, 1);
 8000856:	2201      	movs	r2, #1
 8000858:	2102      	movs	r1, #2
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f001 fa01 	bl	8001c64 <HAL_GPIO_WritePin>

						  lcd_data(1, 1, " WRONG PASSWORD ");
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <main+0x6c8>)
 8000864:	2101      	movs	r1, #1
 8000866:	2001      	movs	r0, #1
 8000868:	f000 fc62 	bl	8001130 <lcd_data>
						  lcd_data(2, 1, "                ");
 800086c:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <main+0x6e4>)
 800086e:	2101      	movs	r1, #1
 8000870:	2002      	movs	r0, #2
 8000872:	f000 fc5d 	bl	8001130 <lcd_data>

						  HAL_Delay(1000);
 8000876:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087a:	f000 ff47 	bl	800170c <HAL_Delay>

						  HAL_GPIO_WritePin(GPIOA, LD_RED_Pin, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2102      	movs	r1, #2
 8000882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000886:	f001 f9ed 	bl	8001c64 <HAL_GPIO_WritePin>
					  if (pass_check > 3)
 800088a:	e03a      	b.n	8000902 <main+0x72e>
 800088c:	0801fc00 	.word	0x0801fc00
 8000890:	0801fc08 	.word	0x0801fc08
 8000894:	08003038 	.word	0x08003038
 8000898:	0800304c 	.word	0x0800304c
 800089c:	0800305c 	.word	0x0800305c
 80008a0:	08003070 	.word	0x08003070
 80008a4:	08003080 	.word	0x08003080
 80008a8:	08003090 	.word	0x08003090
 80008ac:	08002ff8 	.word	0x08002ff8
 80008b0:	08003004 	.word	0x08003004
 80008b4:	080030a4 	.word	0x080030a4
 80008b8:	08002fd4 	.word	0x08002fd4
					  }
				  }

				  //If * button is pressed, clean password filed, or cancel if password files is empty.
				  else if (key == '*')
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	2b2a      	cmp	r3, #42	; 0x2a
 80008c0:	d11f      	bne.n	8000902 <main+0x72e>
				  {
					  if (counter == 0)
 80008c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d110      	bne.n	80008ea <main+0x716>
					  {
						  lcd_data(1, 1, "OPERATION       ");
 80008c8:	4aa7      	ldr	r2, [pc, #668]	; (8000b68 <main+0x994>)
 80008ca:	2101      	movs	r1, #1
 80008cc:	2001      	movs	r0, #1
 80008ce:	f000 fc2f 	bl	8001130 <lcd_data>
						  lcd_data(2, 1, "CANCELLED       ");
 80008d2:	4aa6      	ldr	r2, [pc, #664]	; (8000b6c <main+0x998>)
 80008d4:	2101      	movs	r1, #1
 80008d6:	2002      	movs	r0, #2
 80008d8:	f000 fc2a 	bl	8001130 <lcd_data>

						  HAL_Delay(1000);
 80008dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e0:	f000 ff14 	bl	800170c <HAL_Delay>

						  operation_check = 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	657b      	str	r3, [r7, #84]	; 0x54
 80008e8:	e00b      	b.n	8000902 <main+0x72e>
					  }

					  else
					  {
						  counter = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	65fb      	str	r3, [r7, #92]	; 0x5c

						  lcd_data(2, 1, "PASSWORD:       ");
 80008ee:	4aa0      	ldr	r2, [pc, #640]	; (8000b70 <main+0x99c>)
 80008f0:	2101      	movs	r1, #1
 80008f2:	2002      	movs	r0, #2
 80008f4:	f000 fc1c 	bl	8001130 <lcd_data>
						  lcd_data(2, 10, " ");
 80008f8:	4a9e      	ldr	r2, [pc, #632]	; (8000b74 <main+0x9a0>)
 80008fa:	210a      	movs	r1, #10
 80008fc:	2002      	movs	r0, #2
 80008fe:	f000 fc17 	bl	8001130 <lcd_data>
			  while(!operation_check)
 8000902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000904:	2b00      	cmp	r3, #0
 8000906:	f43f aed5 	beq.w	80006b4 <main+0x4e0>
 800090a:	e232      	b.n	8000d72 <main+0xb9e>
				  }
			  }
		  }

		  //If * button is pressed, change password selection.
		  else if (key == '*')
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	2b2a      	cmp	r3, #42	; 0x2a
 8000910:	f040 8201 	bne.w	8000d16 <main+0xb42>
		  {
			  counter = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	65fb      	str	r3, [r7, #92]	; 0x5c
			  operation_check = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	657b      	str	r3, [r7, #84]	; 0x54

			  lcd_data(1, 1, "                ");
 800091c:	4a96      	ldr	r2, [pc, #600]	; (8000b78 <main+0x9a4>)
 800091e:	2101      	movs	r1, #1
 8000920:	2001      	movs	r0, #1
 8000922:	f000 fc05 	bl	8001130 <lcd_data>
			  lcd_data(2, 1, "                ");
 8000926:	4a94      	ldr	r2, [pc, #592]	; (8000b78 <main+0x9a4>)
 8000928:	2101      	movs	r1, #1
 800092a:	2002      	movs	r0, #2
 800092c:	f000 fc00 	bl	8001130 <lcd_data>

			  while(!operation_check)
 8000930:	e1ec      	b.n	8000d0c <main+0xb38>
			  {
				  /* Password Check */

				  lcd_data(1, 1, "OLD             ");
 8000932:	4a92      	ldr	r2, [pc, #584]	; (8000b7c <main+0x9a8>)
 8000934:	2101      	movs	r1, #1
 8000936:	2001      	movs	r0, #1
 8000938:	f000 fbfa 	bl	8001130 <lcd_data>
				  lcd_data(2, 1, "PASSWORD:       ");
 800093c:	4a8c      	ldr	r2, [pc, #560]	; (8000b70 <main+0x99c>)
 800093e:	2101      	movs	r1, #1
 8000940:	2002      	movs	r0, #2
 8000942:	f000 fbf5 	bl	8001130 <lcd_data>
				  lcd_data(2, 10, " ");
 8000946:	4a8b      	ldr	r2, [pc, #556]	; (8000b74 <main+0x9a0>)
 8000948:	210a      	movs	r1, #10
 800094a:	2002      	movs	r0, #2
 800094c:	f000 fbf0 	bl	8001130 <lcd_data>

				  key = keypad_scanner();
 8000950:	f000 fc18 	bl	8001184 <keypad_scanner>
 8000954:	4603      	mov	r3, r0
 8000956:	73fb      	strb	r3, [r7, #15]

				  if (counter <= 3 && key != '*' && key != '#' && key != 'n')
 8000958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800095a:	2b03      	cmp	r3, #3
 800095c:	dc28      	bgt.n	80009b0 <main+0x7dc>
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	2b2a      	cmp	r3, #42	; 0x2a
 8000962:	d025      	beq.n	80009b0 <main+0x7dc>
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	2b23      	cmp	r3, #35	; 0x23
 8000968:	d022      	beq.n	80009b0 <main+0x7dc>
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	2b6e      	cmp	r3, #110	; 0x6e
 800096e:	d01f      	beq.n	80009b0 <main+0x7dc>
				  {
					  key_temp = key;
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	603b      	str	r3, [r7, #0]
					  password_temp[counter] = key;
 8000974:	1d3a      	adds	r2, r7, #4
 8000976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000978:	4413      	add	r3, r2
 800097a:	7bfa      	ldrb	r2, [r7, #15]
 800097c:	701a      	strb	r2, [r3, #0]

					  lcd_data(2, 11 + counter, &key_temp);
 800097e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000980:	b2db      	uxtb	r3, r3
 8000982:	330b      	adds	r3, #11
 8000984:	b2db      	uxtb	r3, r3
 8000986:	463a      	mov	r2, r7
 8000988:	4619      	mov	r1, r3
 800098a:	2002      	movs	r0, #2
 800098c:	f000 fbd0 	bl	8001130 <lcd_data>
					  HAL_Delay(200);
 8000990:	20c8      	movs	r0, #200	; 0xc8
 8000992:	f000 febb 	bl	800170c <HAL_Delay>
					  lcd_data(2, 11 + counter, "*");
 8000996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000998:	b2db      	uxtb	r3, r3
 800099a:	330b      	adds	r3, #11
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4a78      	ldr	r2, [pc, #480]	; (8000b80 <main+0x9ac>)
 80009a0:	4619      	mov	r1, r3
 80009a2:	2002      	movs	r0, #2
 80009a4:	f000 fbc4 	bl	8001130 <lcd_data>

					  counter++;
 80009a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009aa:	3301      	adds	r3, #1
 80009ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80009ae:	e1ad      	b.n	8000d0c <main+0xb38>
				  }

				  else if (counter > 3 && key == '#')
 80009b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	f340 818e 	ble.w	8000cd4 <main+0xb00>
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	2b23      	cmp	r3, #35	; 0x23
 80009bc:	f040 818a 	bne.w	8000cd4 <main+0xb00>
				  {
					  counter = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	65fb      	str	r3, [r7, #92]	; 0x5c
					  pass_check = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	65bb      	str	r3, [r7, #88]	; 0x58

					  for (int i = 0; i < 4; i++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009cc:	e023      	b.n	8000a16 <main+0x842>
					  {
						  memory_data = Flash_Read(memory_address + i * 2);
 80009ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d0:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 80009d4:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fd90 	bl	8001500 <Flash_Read>
 80009e0:	4603      	mov	r3, r0
 80009e2:	82fb      	strh	r3, [r7, #22]
						  password[i] = memory_data;
 80009e4:	8afb      	ldrh	r3, [r7, #22]
 80009e6:	b2d9      	uxtb	r1, r3
 80009e8:	f107 0208 	add.w	r2, r7, #8
 80009ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ee:	4413      	add	r3, r2
 80009f0:	460a      	mov	r2, r1
 80009f2:	701a      	strb	r2, [r3, #0]

						  if (password[i] == password_temp[i])
 80009f4:	f107 0208 	add.w	r2, r7, #8
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	4413      	add	r3, r2
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	1d39      	adds	r1, r7, #4
 8000a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a02:	440b      	add	r3, r1
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d102      	bne.n	8000a10 <main+0x83c>
						  {
							  pass_check++;
 8000a0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	65bb      	str	r3, [r7, #88]	; 0x58
					  for (int i = 0; i < 4; i++)
 8000a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a12:	3301      	adds	r3, #1
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	ddd8      	ble.n	80009ce <main+0x7fa>
						  }
					  }

					  for (int i = 0; i < 4; i++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a20:	e014      	b.n	8000a4c <main+0x878>
					  {
						  memory_data = Flash_Read(memory_address + i * 2);
 8000a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a24:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8000a28:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fd66 	bl	8001500 <Flash_Read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	82fb      	strh	r3, [r7, #22]
						  password_temp[i] = memory_data;
 8000a38:	8afb      	ldrh	r3, [r7, #22]
 8000a3a:	b2d9      	uxtb	r1, r3
 8000a3c:	1d3a      	adds	r2, r7, #4
 8000a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a40:	4413      	add	r3, r2
 8000a42:	460a      	mov	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]
					  for (int i = 0; i < 4; i++)
 8000a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a48:	3301      	adds	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	dde7      	ble.n	8000a22 <main+0x84e>
					  }

					  Flash_Erase(memory_address);
 8000a52:	484c      	ldr	r0, [pc, #304]	; (8000b84 <main+0x9b0>)
 8000a54:	f000 fcf2 	bl	800143c <Flash_Erase>

					  for (int i = 0; i < 4; i++)
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a5c:	e013      	b.n	8000a86 <main+0x8b2>
					  {
						  memory_data = (uint16_t *)password_temp[i];
 8000a5e:	1d3a      	adds	r2, r7, #4
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	82fb      	strh	r3, [r7, #22]
						  Flash_Write(memory_address + i * 2, memory_data);
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8000a6e:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	461a      	mov	r2, r3
 8000a76:	8afb      	ldrh	r3, [r7, #22]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	f000 fd14 	bl	80014a8 <Flash_Write>
					  for (int i = 0; i < 4; i++)
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	3301      	adds	r3, #1
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	dde8      	ble.n	8000a5e <main+0x88a>
					  }

					  Flash_Write(memory_address + 8, 10);
 8000a8c:	210a      	movs	r1, #10
 8000a8e:	483e      	ldr	r0, [pc, #248]	; (8000b88 <main+0x9b4>)
 8000a90:	f000 fd0a 	bl	80014a8 <Flash_Write>

					  if (pass_check > 3)
 8000a94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	f340 8138 	ble.w	8000d0c <main+0xb38>
					  {
						  counter = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	65fb      	str	r3, [r7, #92]	; 0x5c

						  HAL_GPIO_WritePin(LD_GREEN_GPIO_Port, LD_GREEN_Pin, 1);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f001 f8dc 	bl	8001c64 <HAL_GPIO_WritePin>

						  lcd_data(1, 1, "               ");
 8000aac:	4a37      	ldr	r2, [pc, #220]	; (8000b8c <main+0x9b8>)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f000 fb3d 	bl	8001130 <lcd_data>
						  lcd_data(2, 1, "               ");
 8000ab6:	4a35      	ldr	r2, [pc, #212]	; (8000b8c <main+0x9b8>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	2002      	movs	r0, #2
 8000abc:	f000 fb38 	bl	8001130 <lcd_data>

						  HAL_Delay(200);
 8000ac0:	20c8      	movs	r0, #200	; 0xc8
 8000ac2:	f000 fe23 	bl	800170c <HAL_Delay>

						  HAL_GPIO_WritePin(LD_GREEN_GPIO_Port, LD_GREEN_Pin, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2101      	movs	r1, #1
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f001 f8c9 	bl	8001c64 <HAL_GPIO_WritePin>

						  /* New password */

						  while (1)
						  {
							  lcd_data(1, 1, "NEW             ");
 8000ad2:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <main+0x9bc>)
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 fb2a 	bl	8001130 <lcd_data>
							  lcd_data(2, 1, "PASSWORD: ");
 8000adc:	4a2d      	ldr	r2, [pc, #180]	; (8000b94 <main+0x9c0>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f000 fb25 	bl	8001130 <lcd_data>

							  key = keypad_scanner();
 8000ae6:	f000 fb4d 	bl	8001184 <keypad_scanner>
 8000aea:	4603      	mov	r3, r0
 8000aec:	73fb      	strb	r3, [r7, #15]

							  if (counter<=3 && key!='n' && key!='#' && key!='*')
 8000aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	dc28      	bgt.n	8000b46 <main+0x972>
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b6e      	cmp	r3, #110	; 0x6e
 8000af8:	d025      	beq.n	8000b46 <main+0x972>
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	2b23      	cmp	r3, #35	; 0x23
 8000afe:	d022      	beq.n	8000b46 <main+0x972>
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	2b2a      	cmp	r3, #42	; 0x2a
 8000b04:	d01f      	beq.n	8000b46 <main+0x972>
							  {
								  key_temp = key;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	603b      	str	r3, [r7, #0]
								  password_temp[counter] = key;
 8000b0a:	1d3a      	adds	r2, r7, #4
 8000b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b0e:	4413      	add	r3, r2
 8000b10:	7bfa      	ldrb	r2, [r7, #15]
 8000b12:	701a      	strb	r2, [r3, #0]

								  lcd_data(2, 11 + counter, &key_temp);
 8000b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	330b      	adds	r3, #11
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	463a      	mov	r2, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	2002      	movs	r0, #2
 8000b22:	f000 fb05 	bl	8001130 <lcd_data>
								  HAL_Delay(200);
 8000b26:	20c8      	movs	r0, #200	; 0xc8
 8000b28:	f000 fdf0 	bl	800170c <HAL_Delay>
								  lcd_data(2, 11 + counter, "*");
 8000b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	330b      	adds	r3, #11
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <main+0x9ac>)
 8000b36:	4619      	mov	r1, r3
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f000 faf9 	bl	8001130 <lcd_data>

								  counter++;
 8000b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b40:	3301      	adds	r3, #1
 8000b42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000b44:	e0c4      	b.n	8000cd0 <main+0xafc>
							  }

							  else if (counter > 3 && key == '#')
 8000b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	f340 809d 	ble.w	8000c88 <main+0xab4>
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	2b23      	cmp	r3, #35	; 0x23
 8000b52:	f040 8099 	bne.w	8000c88 <main+0xab4>
							  {
								  counter = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	65fb      	str	r3, [r7, #92]	; 0x5c

								  //Erase memory
								  Flash_Erase(memory_address);
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <main+0x9b0>)
 8000b5c:	f000 fc6e 	bl	800143c <Flash_Erase>

								  //Write new password to memory
								  for (int i = 0; i < 4; i++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
 8000b64:	e03f      	b.n	8000be6 <main+0xa12>
 8000b66:	bf00      	nop
 8000b68:	080030b8 	.word	0x080030b8
 8000b6c:	080030cc 	.word	0x080030cc
 8000b70:	080030e0 	.word	0x080030e0
 8000b74:	08003034 	.word	0x08003034
 8000b78:	08002fd4 	.word	0x08002fd4
 8000b7c:	080030f4 	.word	0x080030f4
 8000b80:	08003004 	.word	0x08003004
 8000b84:	0801fc00 	.word	0x0801fc00
 8000b88:	0801fc08 	.word	0x0801fc08
 8000b8c:	08003080 	.word	0x08003080
 8000b90:	08003108 	.word	0x08003108
 8000b94:	08002ff8 	.word	0x08002ff8
								  {
									  memory_data = (uint16_t *)password_temp[i];
 8000b98:	1d3a      	adds	r2, r7, #4
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	82fb      	strh	r3, [r7, #22]
									  Flash_Write(memory_address+i*2,memory_data);
 8000ba2:	6a3b      	ldr	r3, [r7, #32]
 8000ba4:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8000ba8:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	461a      	mov	r2, r3
 8000bb0:	8afb      	ldrh	r3, [r7, #22]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4610      	mov	r0, r2
 8000bb6:	f000 fc77 	bl	80014a8 <Flash_Write>

									  memory_data = Flash_Read(memory_address+i*2);
 8000bba:	6a3b      	ldr	r3, [r7, #32]
 8000bbc:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8000bc0:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fc9a 	bl	8001500 <Flash_Read>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	82fb      	strh	r3, [r7, #22]
									  password [i] = memory_data;
 8000bd0:	8afb      	ldrh	r3, [r7, #22]
 8000bd2:	b2d9      	uxtb	r1, r3
 8000bd4:	f107 0208 	add.w	r2, r7, #8
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
 8000bda:	4413      	add	r3, r2
 8000bdc:	460a      	mov	r2, r1
 8000bde:	701a      	strb	r2, [r3, #0]
								  for (int i = 0; i < 4; i++)
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	3301      	adds	r3, #1
 8000be4:	623b      	str	r3, [r7, #32]
 8000be6:	6a3b      	ldr	r3, [r7, #32]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	ddd5      	ble.n	8000b98 <main+0x9c4>
								  }

								  //Write door is open info to memory
								  Flash_Write(memory_address + 8, 10);
 8000bec:	210a      	movs	r1, #10
 8000bee:	4865      	ldr	r0, [pc, #404]	; (8000d84 <main+0xbb0>)
 8000bf0:	f000 fc5a 	bl	80014a8 <Flash_Write>

								  /* Done! */

								  HAL_GPIO_WritePin(GPIOA, LD_GREEN_Pin, 1);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f001 f832 	bl	8001c64 <HAL_GPIO_WritePin>

								  lcd_data(1, 1, "      DONE      ");
 8000c00:	4a61      	ldr	r2, [pc, #388]	; (8000d88 <main+0xbb4>)
 8000c02:	2101      	movs	r1, #1
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fa93 	bl	8001130 <lcd_data>
								  lcd_data(2, 1, "PASSWORD:       ");
 8000c0a:	4a60      	ldr	r2, [pc, #384]	; (8000d8c <main+0xbb8>)
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f000 fa8e 	bl	8001130 <lcd_data>

								  for (int i = 0; i < 4; i++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
 8000c18:	e011      	b.n	8000c3e <main+0xa6a>
								  {
									  key_temp = password[i];
 8000c1a:	f107 0208 	add.w	r2, r7, #8
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	4413      	add	r3, r2
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	603b      	str	r3, [r7, #0]

									  lcd_data(2, 11 + i, &key_temp);
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	330b      	adds	r3, #11
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	463a      	mov	r2, r7
 8000c30:	4619      	mov	r1, r3
 8000c32:	2002      	movs	r0, #2
 8000c34:	f000 fa7c 	bl	8001130 <lcd_data>
								  for (int i = 0; i < 4; i++)
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	61fb      	str	r3, [r7, #28]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	ddea      	ble.n	8000c1a <main+0xa46>
								  }

								  HAL_Delay(1000);
 8000c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c48:	f000 fd60 	bl	800170c <HAL_Delay>

								  for (int i = 0; i < 4; i++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	e00b      	b.n	8000c6a <main+0xa96>
								  {
									  lcd_data(2, 11 + i, "*");
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	330b      	adds	r3, #11
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4a4d      	ldr	r2, [pc, #308]	; (8000d90 <main+0xbbc>)
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f000 fa66 	bl	8001130 <lcd_data>
								  for (int i = 0; i < 4; i++)
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	3301      	adds	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	ddf0      	ble.n	8000c52 <main+0xa7e>
								  }

								  HAL_Delay(200);
 8000c70:	20c8      	movs	r0, #200	; 0xc8
 8000c72:	f000 fd4b 	bl	800170c <HAL_Delay>

								  HAL_GPIO_WritePin(GPIOA, LD_GREEN_Pin, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2101      	movs	r1, #1
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f000 fff1 	bl	8001c64 <HAL_GPIO_WritePin>

								  operation_check = 1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	657b      	str	r3, [r7, #84]	; 0x54
								  break;
 8000c86:	e024      	b.n	8000cd2 <main+0xafe>
							  }

							  //If * button is pressed, clean password field or cancel
							  else if (key == '*')
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8000c8c:	f47f af21 	bne.w	8000ad2 <main+0x8fe>
							  {
								  if (counter == 0)
 8000c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d110      	bne.n	8000cb8 <main+0xae4>
								  {
									  lcd_data(1, 1, "OPERATION       ");
 8000c96:	4a3f      	ldr	r2, [pc, #252]	; (8000d94 <main+0xbc0>)
 8000c98:	2101      	movs	r1, #1
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 fa48 	bl	8001130 <lcd_data>
									  lcd_data(2, 1, "CANCELLED       ");
 8000ca0:	4a3d      	ldr	r2, [pc, #244]	; (8000d98 <main+0xbc4>)
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f000 fa43 	bl	8001130 <lcd_data>

									  HAL_Delay(1000);
 8000caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cae:	f000 fd2d 	bl	800170c <HAL_Delay>

									  operation_check = 1;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	657b      	str	r3, [r7, #84]	; 0x54
									  break;
 8000cb6:	e00c      	b.n	8000cd2 <main+0xafe>
								  }

								  else
								  {
									  counter = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	65fb      	str	r3, [r7, #92]	; 0x5c

									  lcd_data(2, 1, "PASSWORD:       ");
 8000cbc:	4a33      	ldr	r2, [pc, #204]	; (8000d8c <main+0xbb8>)
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f000 fa35 	bl	8001130 <lcd_data>
									  lcd_data(2, 10, " ");
 8000cc6:	4a35      	ldr	r2, [pc, #212]	; (8000d9c <main+0xbc8>)
 8000cc8:	210a      	movs	r1, #10
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f000 fa30 	bl	8001130 <lcd_data>
							  lcd_data(1, 1, "NEW             ");
 8000cd0:	e6ff      	b.n	8000ad2 <main+0x8fe>
					  if (pass_check > 3)
 8000cd2:	e01b      	b.n	8000d0c <main+0xb38>
					  }
				  }

				  else
				  {
					  counter = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	65fb      	str	r3, [r7, #92]	; 0x5c

					  HAL_GPIO_WritePin(GPIOA, LD_RED_Pin, 1);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2102      	movs	r1, #2
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f000 ffc0 	bl	8001c64 <HAL_GPIO_WritePin>

					  lcd_data(1, 1, " WRONG PASSWORD ");
 8000ce4:	4a2e      	ldr	r2, [pc, #184]	; (8000da0 <main+0xbcc>)
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f000 fa21 	bl	8001130 <lcd_data>
					  lcd_data(2, 1, "                ");
 8000cee:	4a2d      	ldr	r2, [pc, #180]	; (8000da4 <main+0xbd0>)
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	f000 fa1c 	bl	8001130 <lcd_data>

					  HAL_Delay(1000);
 8000cf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cfc:	f000 fd06 	bl	800170c <HAL_Delay>

					  HAL_GPIO_WritePin(GPIOA, LD_RED_Pin, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2102      	movs	r1, #2
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f000 ffac 	bl	8001c64 <HAL_GPIO_WritePin>
			  while(!operation_check)
 8000d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f43f ae0f 	beq.w	8000932 <main+0x75e>
 8000d14:	e02d      	b.n	8000d72 <main+0xb9e>
				  }
			  }
		  }
		  //If * button is pressed, clean password field or cancel
		  else if (key == '*')
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2b2a      	cmp	r3, #42	; 0x2a
 8000d1a:	d120      	bne.n	8000d5e <main+0xb8a>
		  {
			  if (counter == 0)
 8000d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d110      	bne.n	8000d44 <main+0xb70>
			  {
				  lcd_data(1, 1, "OPERATION       ");
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <main+0xbc0>)
 8000d24:	2101      	movs	r1, #1
 8000d26:	2001      	movs	r0, #1
 8000d28:	f000 fa02 	bl	8001130 <lcd_data>
				  lcd_data(2, 1, "CANCELLED       ");
 8000d2c:	4a1a      	ldr	r2, [pc, #104]	; (8000d98 <main+0xbc4>)
 8000d2e:	2101      	movs	r1, #1
 8000d30:	2002      	movs	r0, #2
 8000d32:	f000 f9fd 	bl	8001130 <lcd_data>

				  HAL_Delay(1000);
 8000d36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3a:	f000 fce7 	bl	800170c <HAL_Delay>

				  operation_check = 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	657b      	str	r3, [r7, #84]	; 0x54
				  break;
 8000d42:	e01d      	b.n	8000d80 <main+0xbac>
			  }

			  else
			  {
				  counter = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	65fb      	str	r3, [r7, #92]	; 0x5c

				  lcd_data(2, 1, "PASSWORD:       ");
 8000d48:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <main+0xbb8>)
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f000 f9ef 	bl	8001130 <lcd_data>
				  lcd_data(2, 10, " ");
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <main+0xbc8>)
 8000d54:	210a      	movs	r1, #10
 8000d56:	2002      	movs	r0, #2
 8000d58:	f000 f9ea 	bl	8001130 <lcd_data>
 8000d5c:	e009      	b.n	8000d72 <main+0xb9e>
		  }

		  //Door is open & selection message
		  else
		  {
			  lcd_data(1, 1, "STATUS: OPEN    ");
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <main+0xbd4>)
 8000d60:	2101      	movs	r1, #1
 8000d62:	2001      	movs	r0, #1
 8000d64:	f000 f9e4 	bl	8001130 <lcd_data>
			  lcd_data(2, 1, "PRESS * OR #    ");
 8000d68:	4a10      	ldr	r2, [pc, #64]	; (8000dac <main+0xbd8>)
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	f000 f9df 	bl	8001130 <lcd_data>
	  while (Flash_Read(memory_address + 8) == 10)
 8000d72:	4804      	ldr	r0, [pc, #16]	; (8000d84 <main+0xbb0>)
 8000d74:	f000 fbc4 	bl	8001500 <Flash_Read>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b0a      	cmp	r3, #10
 8000d7c:	f43f ac83 	beq.w	8000686 <main+0x4b2>
	  lcd_data(1, 1, "                ");
 8000d80:	f7ff bb40 	b.w	8000404 <main+0x230>
 8000d84:	0801fc08 	.word	0x0801fc08
 8000d88:	0800311c 	.word	0x0800311c
 8000d8c:	080030e0 	.word	0x080030e0
 8000d90:	08003004 	.word	0x08003004
 8000d94:	080030b8 	.word	0x080030b8
 8000d98:	080030cc 	.word	0x080030cc
 8000d9c:	08003034 	.word	0x08003034
 8000da0:	0800305c 	.word	0x0800305c
 8000da4:	08002fd4 	.word	0x08002fd4
 8000da8:	08003130 	.word	0x08003130
 8000dac:	08003144 	.word	0x08003144

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b090      	sub	sp, #64	; 0x40
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0318 	add.w	r3, r7, #24
 8000dba:	2228      	movs	r2, #40	; 0x28
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 f8c0 	bl	8002f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de0:	2302      	movs	r3, #2
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 ff4b 	bl	8001c94 <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e04:	f000 fb8a 	bl	800151c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e08:	230f      	movs	r3, #15
 8000e0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2102      	movs	r1, #2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 fe4c 	bl	8002ac0 <HAL_RCC_ClockConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e2e:	f000 fb75 	bl	800151c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000e32:	f001 ffc1 	bl	8002db8 <HAL_RCC_EnableCSS>
}
 8000e36:	bf00      	nop
 8000e38:	3740      	adds	r7, #64	; 0x40
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e56:	4b48      	ldr	r3, [pc, #288]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	4a47      	ldr	r2, [pc, #284]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e60:	6153      	str	r3, [r2, #20]
 8000e62:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b42      	ldr	r3, [pc, #264]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	4a41      	ldr	r2, [pc, #260]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	6153      	str	r3, [r2, #20]
 8000e7a:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b3c      	ldr	r3, [pc, #240]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a3b      	ldr	r2, [pc, #236]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a35      	ldr	r2, [pc, #212]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000ea4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ea8:	6153      	str	r3, [r2, #20]
 8000eaa:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <MX_GPIO_Init+0x138>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LD_GREEN_Pin|LD_RED_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2123      	movs	r1, #35	; 0x23
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f000 fed1 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	210c      	movs	r1, #12
 8000ec6:	482d      	ldr	r0, [pc, #180]	; (8000f7c <MX_GPIO_Init+0x13c>)
 8000ec8:	f000 fecc 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R2_Pin|R1_Pin|R3_Pin|R4_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 51aa 	mov.w	r1, #5440	; 0x1540
 8000ed2:	482b      	ldr	r0, [pc, #172]	; (8000f80 <MX_GPIO_Init+0x140>)
 8000ed4:	f000 fec6 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	21f0      	movs	r1, #240	; 0xf0
 8000edc:	4827      	ldr	r0, [pc, #156]	; (8000f7c <MX_GPIO_Init+0x13c>)
 8000ede:	f000 fec1 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_GREEN_Pin LD_RED_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD_GREEN_Pin|LD_RED_Pin|LD2_Pin;
 8000ee2:	2323      	movs	r3, #35	; 0x23
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efc:	f000 fd10 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|D4_Pin|D5_Pin
 8000f00:	23fc      	movs	r3, #252	; 0xfc
 8000f02:	617b      	str	r3, [r7, #20]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4819      	ldr	r0, [pc, #100]	; (8000f7c <MX_GPIO_Init+0x13c>)
 8000f18:	f000 fd02 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pin : C3_Pin */
  GPIO_InitStruct.Pin = C3_Pin;
 8000f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(C3_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4812      	ldr	r0, [pc, #72]	; (8000f7c <MX_GPIO_Init+0x13c>)
 8000f32:	f000 fcf5 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : R2_Pin R1_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R2_Pin|R1_Pin|R3_Pin|R4_Pin;
 8000f36:	f44f 53aa 	mov.w	r3, #5440	; 0x1540
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f3c:	2311      	movs	r3, #17
 8000f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480c      	ldr	r0, [pc, #48]	; (8000f80 <MX_GPIO_Init+0x140>)
 8000f50:	f000 fce6 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C2_Pin|C1_Pin;
 8000f54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6c:	f000 fcd8 	bl	8001920 <HAL_GPIO_Init>

}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	; 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	48000400 	.word	0x48000400
 8000f80:	48000800 	.word	0x48000800

08000f84 <delay_us>:

/* USER CODE BEGIN 4 */

void delay_us ()
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
	unsigned int time=680;
 8000f8a:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 8000f8e:	607b      	str	r3, [r7, #4]
	while (time--);
 8000f90:	bf00      	nop
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	607a      	str	r2, [r7, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1fa      	bne.n	8000f92 <delay_us+0xe>
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <InitLCD>:

void InitLCD (void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
  HAL_Delay (200);
 8000fae:	20c8      	movs	r0, #200	; 0xc8
 8000fb0:	f000 fbac 	bl	800170c <HAL_Delay>
  lcd_init_write(0x30);
 8000fb4:	2030      	movs	r0, #48	; 0x30
 8000fb6:	f000 f827 	bl	8001008 <lcd_init_write>
  HAL_Delay (10);
 8000fba:	200a      	movs	r0, #10
 8000fbc:	f000 fba6 	bl	800170c <HAL_Delay>
  lcd_init_write(0x30);
 8000fc0:	2030      	movs	r0, #48	; 0x30
 8000fc2:	f000 f821 	bl	8001008 <lcd_init_write>
  HAL_Delay (10);
 8000fc6:	200a      	movs	r0, #10
 8000fc8:	f000 fba0 	bl	800170c <HAL_Delay>
  lcd_init_write(0x30);
 8000fcc:	2030      	movs	r0, #48	; 0x30
 8000fce:	f000 f81b 	bl	8001008 <lcd_init_write>
  HAL_Delay (10);
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f000 fb9a 	bl	800170c <HAL_Delay>
  lcd_init_write(0x20);
 8000fd8:	2020      	movs	r0, #32
 8000fda:	f000 f815 	bl	8001008 <lcd_init_write>
  HAL_Delay (10);
 8000fde:	200a      	movs	r0, #10
 8000fe0:	f000 fb94 	bl	800170c <HAL_Delay>

  lcd_cmd(0x28);
 8000fe4:	2028      	movs	r0, #40	; 0x28
 8000fe6:	f000 f845 	bl	8001074 <lcd_cmd>
  lcd_cmd(0x08);
 8000fea:	2008      	movs	r0, #8
 8000fec:	f000 f842 	bl	8001074 <lcd_cmd>
  lcd_cmd(0x01);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f000 f83f 	bl	8001074 <lcd_cmd>
  lcd_cmd(0x06);
 8000ff6:	2006      	movs	r0, #6
 8000ff8:	f000 f83c 	bl	8001074 <lcd_cmd>
  lcd_cmd(0x0F);
 8000ffc:	200f      	movs	r0, #15
 8000ffe:	f000 f839 	bl	8001074 <lcd_cmd>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <lcd_init_write>:

void lcd_init_write(unsigned char value)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin (LCD_RS_GPIO_Port, LCD_RS_Pin,0);
 8001012:	2200      	movs	r2, #0
 8001014:	2104      	movs	r1, #4
 8001016:	480c      	ldr	r0, [pc, #48]	; (8001048 <lcd_init_write+0x40>)
 8001018:	f000 fe24 	bl	8001c64 <HAL_GPIO_WritePin>
	GPIOB->ODR= (GPIOB->ODR & 0x0F) | (value & 0xF0) ;
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <lcd_init_write+0x40>)
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	f003 020f 	and.w	r2, r3, #15
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800102a:	4907      	ldr	r1, [pc, #28]	; (8001048 <lcd_init_write+0x40>)
 800102c:	4313      	orrs	r3, r2
 800102e:	614b      	str	r3, [r1, #20]
	epulse();
 8001030:	f000 f80c 	bl	800104c <epulse>
	HAL_GPIO_WritePin (LCD_RS_GPIO_Port, LCD_RS_Pin,1);
 8001034:	2201      	movs	r2, #1
 8001036:	2104      	movs	r1, #4
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <lcd_init_write+0x40>)
 800103a:	f000 fe13 	bl	8001c64 <HAL_GPIO_WritePin>

}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	48000400 	.word	0x48000400

0800104c <epulse>:

void epulse()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (LCD_E_GPIO_Port, LCD_E_Pin,1);
 8001050:	2201      	movs	r2, #1
 8001052:	2108      	movs	r1, #8
 8001054:	4806      	ldr	r0, [pc, #24]	; (8001070 <epulse+0x24>)
 8001056:	f000 fe05 	bl	8001c64 <HAL_GPIO_WritePin>
	delay_us();
 800105a:	f7ff ff93 	bl	8000f84 <delay_us>
	HAL_GPIO_WritePin (LCD_E_GPIO_Port, LCD_E_Pin,0);
 800105e:	2200      	movs	r2, #0
 8001060:	2108      	movs	r1, #8
 8001062:	4803      	ldr	r0, [pc, #12]	; (8001070 <epulse+0x24>)
 8001064:	f000 fdfe 	bl	8001c64 <HAL_GPIO_WritePin>
	delay_us();
 8001068:	f7ff ff8c 	bl	8000f84 <delay_us>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	48000400 	.word	0x48000400

08001074 <lcd_cmd>:

void lcd_cmd(unsigned char cmd)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin (LCD_RS_GPIO_Port, LCD_RS_Pin,0);
 800107e:	2200      	movs	r2, #0
 8001080:	2104      	movs	r1, #4
 8001082:	4813      	ldr	r0, [pc, #76]	; (80010d0 <lcd_cmd+0x5c>)
 8001084:	f000 fdee 	bl	8001c64 <HAL_GPIO_WritePin>
	GPIOB->ODR= (GPIOB->ODR & 0x0F) | (cmd & 0xF0);
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <lcd_cmd+0x5c>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	f003 020f 	and.w	r2, r3, #15
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001096:	490e      	ldr	r1, [pc, #56]	; (80010d0 <lcd_cmd+0x5c>)
 8001098:	4313      	orrs	r3, r2
 800109a:	614b      	str	r3, [r1, #20]
	epulse();
 800109c:	f7ff ffd6 	bl	800104c <epulse>
	GPIOB->ODR = (GPIOB->ODR & 0x0f) | (cmd<<4);
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <lcd_cmd+0x5c>)
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	79fa      	ldrb	r2, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	4611      	mov	r1, r2
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <lcd_cmd+0x5c>)
 80010b0:	430b      	orrs	r3, r1
 80010b2:	6153      	str	r3, [r2, #20]
	epulse();
 80010b4:	f7ff ffca 	bl	800104c <epulse>
	HAL_GPIO_WritePin (LCD_RS_GPIO_Port, LCD_RS_Pin,1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2104      	movs	r1, #4
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <lcd_cmd+0x5c>)
 80010be:	f000 fdd1 	bl	8001c64 <HAL_GPIO_WritePin>

	HAL_Delay(0.0001);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 fb22 	bl	800170c <HAL_Delay>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	48000400 	.word	0x48000400

080010d4 <lcd_write_data>:
void lcd_write_data (char c)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin (LCD_RS_GPIO_Port, LCD_RS_Pin,1);
 80010de:	2201      	movs	r2, #1
 80010e0:	2104      	movs	r1, #4
 80010e2:	4812      	ldr	r0, [pc, #72]	; (800112c <lcd_write_data+0x58>)
 80010e4:	f000 fdbe 	bl	8001c64 <HAL_GPIO_WritePin>
	GPIOB->ODR = (GPIOB->ODR & 0x0f) | (c & 0xf0);
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <lcd_write_data+0x58>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	f003 020f 	and.w	r2, r3, #15
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010f6:	490d      	ldr	r1, [pc, #52]	; (800112c <lcd_write_data+0x58>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	614b      	str	r3, [r1, #20]
	epulse();
 80010fc:	f7ff ffa6 	bl	800104c <epulse>
	GPIOB->ODR = (GPIOB->ODR & 0x0f) | (c << 4);
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <lcd_write_data+0x58>)
 8001102:	695b      	ldr	r3, [r3, #20]
 8001104:	f003 030f 	and.w	r3, r3, #15
 8001108:	79fa      	ldrb	r2, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	4611      	mov	r1, r2
 800110e:	4a07      	ldr	r2, [pc, #28]	; (800112c <lcd_write_data+0x58>)
 8001110:	430b      	orrs	r3, r1
 8001112:	6153      	str	r3, [r2, #20]
	epulse();
 8001114:	f7ff ff9a 	bl	800104c <epulse>
	HAL_GPIO_WritePin (LCD_RS_GPIO_Port, LCD_RS_Pin,0);
 8001118:	2200      	movs	r2, #0
 800111a:	2104      	movs	r1, #4
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <lcd_write_data+0x58>)
 800111e:	f000 fda1 	bl	8001c64 <HAL_GPIO_WritePin>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	48000400 	.word	0x48000400

08001130 <lcd_data>:

void lcd_data(unsigned char row, unsigned char col, const char *data)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	603a      	str	r2, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	460b      	mov	r3, r1
 800113e:	71bb      	strb	r3, [r7, #6]
	char temp;

	switch(row)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d002      	beq.n	800114c <lcd_data+0x1c>
 8001146:	2b02      	cmp	r3, #2
 8001148:	d004      	beq.n	8001154 <lcd_data+0x24>
 800114a:	e007      	b.n	800115c <lcd_data+0x2c>
	{
		case 1:
			temp = col - 1 + 0x80;
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	337f      	adds	r3, #127	; 0x7f
 8001150:	73fb      	strb	r3, [r7, #15]
			break;
 8001152:	e003      	b.n	800115c <lcd_data+0x2c>
		case 2:
			temp = col - 1 + 0xC0;
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	3b41      	subs	r3, #65	; 0x41
 8001158:	73fb      	strb	r3, [r7, #15]
			break;
 800115a:	bf00      	nop
	}

	lcd_cmd(temp);
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff88 	bl	8001074 <lcd_cmd>

	do
	{
		lcd_write_data(*data++);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	603a      	str	r2, [r7, #0]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ffb1 	bl	80010d4 <lcd_write_data>

	}while(*data);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f4      	bne.n	8001164 <lcd_data+0x34>
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <keypad_scanner>:

char keypad_scanner(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118e:	48a9      	ldr	r0, [pc, #676]	; (8001434 <keypad_scanner+0x2b0>)
 8001190:	f000 fd68 	bl	8001c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 1);
 8001194:	2201      	movs	r2, #1
 8001196:	2140      	movs	r1, #64	; 0x40
 8001198:	48a6      	ldr	r0, [pc, #664]	; (8001434 <keypad_scanner+0x2b0>)
 800119a:	f000 fd63 	bl	8001c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 1);
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a4:	48a3      	ldr	r0, [pc, #652]	; (8001434 <keypad_scanner+0x2b0>)
 80011a6:	f000 fd5d 	bl	8001c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, 1);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b0:	48a0      	ldr	r0, [pc, #640]	; (8001434 <keypad_scanner+0x2b0>)
 80011b2:	f000 fd57 	bl	8001c64 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==0)
 80011b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f000 fd39 	bl	8001c34 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10b      	bne.n	80011e0 <keypad_scanner+0x5c>
	{
		while (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==0);
 80011c8:	bf00      	nop
 80011ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f000 fd2f 	bl	8001c34 <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0f6      	beq.n	80011ca <keypad_scanner+0x46>

		return '1';
 80011dc:	2331      	movs	r3, #49	; 0x31
 80011de:	e127      	b.n	8001430 <keypad_scanner+0x2ac>
	}

	else if (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==0)
 80011e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f000 fd24 	bl	8001c34 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10b      	bne.n	800120a <keypad_scanner+0x86>
	{
		while (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==0);
 80011f2:	bf00      	nop
 80011f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f000 fd1a 	bl	8001c34 <HAL_GPIO_ReadPin>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f6      	beq.n	80011f4 <keypad_scanner+0x70>

		return '2';
 8001206:	2332      	movs	r3, #50	; 0x32
 8001208:	e112      	b.n	8001430 <keypad_scanner+0x2ac>
	}

	else if (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==0)
 800120a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120e:	488a      	ldr	r0, [pc, #552]	; (8001438 <keypad_scanner+0x2b4>)
 8001210:	f000 fd10 	bl	8001c34 <HAL_GPIO_ReadPin>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10a      	bne.n	8001230 <keypad_scanner+0xac>
	{
		while (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==0);
 800121a:	bf00      	nop
 800121c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001220:	4885      	ldr	r0, [pc, #532]	; (8001438 <keypad_scanner+0x2b4>)
 8001222:	f000 fd07 	bl	8001c34 <HAL_GPIO_ReadPin>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f7      	beq.n	800121c <keypad_scanner+0x98>

		return '3';
 800122c:	2333      	movs	r3, #51	; 0x33
 800122e:	e0ff      	b.n	8001430 <keypad_scanner+0x2ac>
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 1);
 8001230:	2201      	movs	r2, #1
 8001232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001236:	487f      	ldr	r0, [pc, #508]	; (8001434 <keypad_scanner+0x2b0>)
 8001238:	f000 fd14 	bl	8001c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	487c      	ldr	r0, [pc, #496]	; (8001434 <keypad_scanner+0x2b0>)
 8001242:	f000 fd0f 	bl	8001c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 1);
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800124c:	4879      	ldr	r0, [pc, #484]	; (8001434 <keypad_scanner+0x2b0>)
 800124e:	f000 fd09 	bl	8001c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, 1);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001258:	4876      	ldr	r0, [pc, #472]	; (8001434 <keypad_scanner+0x2b0>)
 800125a:	f000 fd03 	bl	8001c64 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==0)
 800125e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001266:	f000 fce5 	bl	8001c34 <HAL_GPIO_ReadPin>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10e      	bne.n	800128e <keypad_scanner+0x10a>
	{
		HAL_Delay(50);
 8001270:	2032      	movs	r0, #50	; 0x32
 8001272:	f000 fa4b 	bl	800170c <HAL_Delay>
		while (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==0);
 8001276:	bf00      	nop
 8001278:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f000 fcd8 	bl	8001c34 <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f6      	beq.n	8001278 <keypad_scanner+0xf4>

		return '4';
 800128a:	2334      	movs	r3, #52	; 0x34
 800128c:	e0d0      	b.n	8001430 <keypad_scanner+0x2ac>
	}

	else if (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==0)
 800128e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f000 fccd 	bl	8001c34 <HAL_GPIO_ReadPin>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10b      	bne.n	80012b8 <keypad_scanner+0x134>
	{
		while (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==0);
 80012a0:	bf00      	nop
 80012a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012aa:	f000 fcc3 	bl	8001c34 <HAL_GPIO_ReadPin>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f6      	beq.n	80012a2 <keypad_scanner+0x11e>

		return '5';
 80012b4:	2335      	movs	r3, #53	; 0x35
 80012b6:	e0bb      	b.n	8001430 <keypad_scanner+0x2ac>
	}

	else if (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==0)
 80012b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012bc:	485e      	ldr	r0, [pc, #376]	; (8001438 <keypad_scanner+0x2b4>)
 80012be:	f000 fcb9 	bl	8001c34 <HAL_GPIO_ReadPin>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10a      	bne.n	80012de <keypad_scanner+0x15a>
	{
		while (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==0);
 80012c8:	bf00      	nop
 80012ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ce:	485a      	ldr	r0, [pc, #360]	; (8001438 <keypad_scanner+0x2b4>)
 80012d0:	f000 fcb0 	bl	8001c34 <HAL_GPIO_ReadPin>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f7      	beq.n	80012ca <keypad_scanner+0x146>

		return '6';
 80012da:	2336      	movs	r3, #54	; 0x36
 80012dc:	e0a8      	b.n	8001430 <keypad_scanner+0x2ac>
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 1);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e4:	4853      	ldr	r0, [pc, #332]	; (8001434 <keypad_scanner+0x2b0>)
 80012e6:	f000 fcbd 	bl	8001c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 1);
 80012ea:	2201      	movs	r2, #1
 80012ec:	2140      	movs	r1, #64	; 0x40
 80012ee:	4851      	ldr	r0, [pc, #324]	; (8001434 <keypad_scanner+0x2b0>)
 80012f0:	f000 fcb8 	bl	8001c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fa:	484e      	ldr	r0, [pc, #312]	; (8001434 <keypad_scanner+0x2b0>)
 80012fc:	f000 fcb2 	bl	8001c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, 1);
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001306:	484b      	ldr	r0, [pc, #300]	; (8001434 <keypad_scanner+0x2b0>)
 8001308:	f000 fcac 	bl	8001c64 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==0)
 800130c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001314:	f000 fc8e 	bl	8001c34 <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10b      	bne.n	8001336 <keypad_scanner+0x1b2>
	{
		while (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==0);
 800131e:	bf00      	nop
 8001320:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001328:	f000 fc84 	bl	8001c34 <HAL_GPIO_ReadPin>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f6      	beq.n	8001320 <keypad_scanner+0x19c>

		return '7';
 8001332:	2337      	movs	r3, #55	; 0x37
 8001334:	e07c      	b.n	8001430 <keypad_scanner+0x2ac>
	}

	else if (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==0)
 8001336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f000 fc79 	bl	8001c34 <HAL_GPIO_ReadPin>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10b      	bne.n	8001360 <keypad_scanner+0x1dc>
	{
		while (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==0);
 8001348:	bf00      	nop
 800134a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800134e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001352:	f000 fc6f 	bl	8001c34 <HAL_GPIO_ReadPin>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f6      	beq.n	800134a <keypad_scanner+0x1c6>

		return '8';
 800135c:	2338      	movs	r3, #56	; 0x38
 800135e:	e067      	b.n	8001430 <keypad_scanner+0x2ac>
	}

	else if (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==0)
 8001360:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001364:	4834      	ldr	r0, [pc, #208]	; (8001438 <keypad_scanner+0x2b4>)
 8001366:	f000 fc65 	bl	8001c34 <HAL_GPIO_ReadPin>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10a      	bne.n	8001386 <keypad_scanner+0x202>
	{
		while (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==0);
 8001370:	bf00      	nop
 8001372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001376:	4830      	ldr	r0, [pc, #192]	; (8001438 <keypad_scanner+0x2b4>)
 8001378:	f000 fc5c 	bl	8001c34 <HAL_GPIO_ReadPin>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f7      	beq.n	8001372 <keypad_scanner+0x1ee>

		return '9';
 8001382:	2339      	movs	r3, #57	; 0x39
 8001384:	e054      	b.n	8001430 <keypad_scanner+0x2ac>
	}

	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 1);
 8001386:	2201      	movs	r2, #1
 8001388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138c:	4829      	ldr	r0, [pc, #164]	; (8001434 <keypad_scanner+0x2b0>)
 800138e:	f000 fc69 	bl	8001c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 1);
 8001392:	2201      	movs	r2, #1
 8001394:	2140      	movs	r1, #64	; 0x40
 8001396:	4827      	ldr	r0, [pc, #156]	; (8001434 <keypad_scanner+0x2b0>)
 8001398:	f000 fc64 	bl	8001c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 1);
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a2:	4824      	ldr	r0, [pc, #144]	; (8001434 <keypad_scanner+0x2b0>)
 80013a4:	f000 fc5e 	bl	8001c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ae:	4821      	ldr	r0, [pc, #132]	; (8001434 <keypad_scanner+0x2b0>)
 80013b0:	f000 fc58 	bl	8001c64 <HAL_GPIO_WritePin>

	if (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==0)
 80013b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013bc:	f000 fc3a 	bl	8001c34 <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10b      	bne.n	80013de <keypad_scanner+0x25a>
	{
		while (HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin)==0);
 80013c6:	bf00      	nop
 80013c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d0:	f000 fc30 	bl	8001c34 <HAL_GPIO_ReadPin>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f6      	beq.n	80013c8 <keypad_scanner+0x244>

		return '*';
 80013da:	232a      	movs	r3, #42	; 0x2a
 80013dc:	e028      	b.n	8001430 <keypad_scanner+0x2ac>
	}

	else if (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==0)
 80013de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e6:	f000 fc25 	bl	8001c34 <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10b      	bne.n	8001408 <keypad_scanner+0x284>
	{
		while (HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin)==0);
 80013f0:	bf00      	nop
 80013f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fa:	f000 fc1b 	bl	8001c34 <HAL_GPIO_ReadPin>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f6      	beq.n	80013f2 <keypad_scanner+0x26e>

		return '0';
 8001404:	2330      	movs	r3, #48	; 0x30
 8001406:	e013      	b.n	8001430 <keypad_scanner+0x2ac>
	}

	else if (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==0)
 8001408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800140c:	480a      	ldr	r0, [pc, #40]	; (8001438 <keypad_scanner+0x2b4>)
 800140e:	f000 fc11 	bl	8001c34 <HAL_GPIO_ReadPin>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10a      	bne.n	800142e <keypad_scanner+0x2aa>
	{
		while (HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin)==0);
 8001418:	bf00      	nop
 800141a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <keypad_scanner+0x2b4>)
 8001420:	f000 fc08 	bl	8001c34 <HAL_GPIO_ReadPin>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f7      	beq.n	800141a <keypad_scanner+0x296>

		return '#';
 800142a:	2323      	movs	r3, #35	; 0x23
 800142c:	e000      	b.n	8001430 <keypad_scanner+0x2ac>
	}

	return 'n';
 800142e:	236e      	movs	r3, #110	; 0x6e
}
 8001430:	4618      	mov	r0, r3
 8001432:	bd80      	pop	{r7, pc}
 8001434:	48000800 	.word	0x48000800
 8001438:	48000400 	.word	0x48000400

0800143c <Flash_Erase>:

void Flash_Erase(uint32_t address)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	FLASH->KEYR=0x45670123;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <Flash_Erase+0x60>)
 8001446:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <Flash_Erase+0x64>)
 8001448:	605a      	str	r2, [r3, #4]
	FLASH->KEYR=0xCDEF89AB;
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <Flash_Erase+0x60>)
 800144c:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <Flash_Erase+0x68>)
 800144e:	605a      	str	r2, [r3, #4]
	FLASH->CR|=0x00000002;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <Flash_Erase+0x60>)
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	4a11      	ldr	r2, [pc, #68]	; (800149c <Flash_Erase+0x60>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	6113      	str	r3, [r2, #16]
	FLASH->AR=address;
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <Flash_Erase+0x60>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6153      	str	r3, [r2, #20]
	FLASH->CR|=0x00000040;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <Flash_Erase+0x60>)
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	4a0d      	ldr	r2, [pc, #52]	; (800149c <Flash_Erase+0x60>)
 8001468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800146c:	6113      	str	r3, [r2, #16]
	while((FLASH->SR&0x00000001));
 800146e:	bf00      	nop
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <Flash_Erase+0x60>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f9      	bne.n	8001470 <Flash_Erase+0x34>
	FLASH->CR &= ~0x00000042;
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <Flash_Erase+0x60>)
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	4a06      	ldr	r2, [pc, #24]	; (800149c <Flash_Erase+0x60>)
 8001482:	f023 0342 	bic.w	r3, r3, #66	; 0x42
 8001486:	6113      	str	r3, [r2, #16]
	FLASH->CR=0x00000080;
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <Flash_Erase+0x60>)
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	611a      	str	r2, [r3, #16]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40022000 	.word	0x40022000
 80014a0:	45670123 	.word	0x45670123
 80014a4:	cdef89ab 	.word	0xcdef89ab

080014a8 <Flash_Write>:

void Flash_Write(uint32_t address, uint16_t data)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
	FLASH->KEYR=0x45670123;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <Flash_Write+0x4c>)
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <Flash_Write+0x50>)
 80014b8:	605a      	str	r2, [r3, #4]
	FLASH->KEYR=0xCDEF89AB;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <Flash_Write+0x4c>)
 80014bc:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <Flash_Write+0x54>)
 80014be:	605a      	str	r2, [r3, #4]
	FLASH->CR|=0x00000001;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <Flash_Write+0x4c>)
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <Flash_Write+0x4c>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6113      	str	r3, [r2, #16]
	*(__IO uint16_t*)address = data;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	801a      	strh	r2, [r3, #0]
	while((FLASH->SR&0x00000001));
 80014d2:	bf00      	nop
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <Flash_Write+0x4c>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f9      	bne.n	80014d4 <Flash_Write+0x2c>
	FLASH->CR=0x00000080;
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <Flash_Write+0x4c>)
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	611a      	str	r2, [r3, #16]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40022000 	.word	0x40022000
 80014f8:	45670123 	.word	0x45670123
 80014fc:	cdef89ab 	.word	0xcdef89ab

08001500 <Flash_Read>:

uint16_t Flash_Read(uint32_t address)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	uint16_t * temp = (uint16_t *)address;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	60fb      	str	r3, [r7, #12]
	return(*temp);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	881b      	ldrh	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001524:	e7fe      	b.n	8001524 <Error_Handler+0x8>
	...

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_MspInit+0x44>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_MspInit+0x44>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6193      	str	r3, [r2, #24]
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_MspInit+0x44>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_MspInit+0x44>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a08      	ldr	r2, [pc, #32]	; (800156c <HAL_MspInit+0x44>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_MspInit+0x44>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800155e:	2007      	movs	r0, #7
 8001560:	f000 f9aa 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001574:	f001 fca6 	bl	8002ec4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x8>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f000 f884 	bl	80016cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <SystemInit+0x20>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <SystemInit+0x20>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001624 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <LoopForever+0x6>)
  ldr r1, =_edata
 80015f2:	490e      	ldr	r1, [pc, #56]	; (800162c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f4:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <LoopForever+0xe>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001608:	4c0b      	ldr	r4, [pc, #44]	; (8001638 <LoopForever+0x16>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001616:	f7ff ffd7 	bl	80015c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161a:	f001 fc6f 	bl	8002efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800161e:	f7fe fdd9 	bl	80001d4 <main>

08001622 <LoopForever>:

LoopForever:
    b LoopForever
 8001622:	e7fe      	b.n	8001622 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001624:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800162c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001630:	08003190 	.word	0x08003190
  ldr r2, =_sbss
 8001634:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001638:	2000002c 	.word	0x2000002c

0800163c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC1_2_IRQHandler>
	...

08001640 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_Init+0x28>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a07      	ldr	r2, [pc, #28]	; (8001668 <HAL_Init+0x28>)
 800164a:	f043 0310 	orr.w	r3, r3, #16
 800164e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001650:	2003      	movs	r0, #3
 8001652:	f000 f931 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001656:	2000      	movs	r0, #0
 8001658:	f000 f808 	bl	800166c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800165c:	f7ff ff64 	bl	8001528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40022000 	.word	0x40022000

0800166c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_InitTick+0x54>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_InitTick+0x58>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001682:	fbb3 f3f1 	udiv	r3, r3, r1
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f93b 	bl	8001906 <HAL_SYSTICK_Config>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e00e      	b.n	80016b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	d80a      	bhi.n	80016b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a0:	2200      	movs	r2, #0
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016a8:	f000 f911 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ac:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <HAL_InitTick+0x5c>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e000      	b.n	80016b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000008 	.word	0x20000008
 80016c8:	20000004 	.word	0x20000004

080016cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20000028 	.word	0x20000028

080016f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000028 	.word	0x20000028

0800170c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff ffee 	bl	80016f4 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffde 	bl	80016f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000008 	.word	0x20000008

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	; (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	; (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
         );
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001898:	f7ff ff8e 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff47 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff5c 	bl	800179c <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff8e 	bl	800180c <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5d 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffb0 	bl	8001874 <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192e:	e160      	b.n	8001bf2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	4013      	ands	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8152 	beq.w	8001bec <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d00b      	beq.n	8001968 <HAL_GPIO_Init+0x48>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d007      	beq.n	8001968 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800195c:	2b11      	cmp	r3, #17
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b12      	cmp	r3, #18
 8001966:	d130      	bne.n	80019ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800199e:	2201      	movs	r2, #1
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	f003 0201 	and.w	r2, r3, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0xea>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b12      	cmp	r3, #18
 8001a08:	d123      	bne.n	8001a52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	08da      	lsrs	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3208      	adds	r2, #8
 8001a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	220f      	movs	r2, #15
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	6939      	ldr	r1, [r7, #16]
 8001a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0203 	and.w	r2, r3, #3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80ac 	beq.w	8001bec <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a94:	4b5e      	ldr	r3, [pc, #376]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a5d      	ldr	r2, [pc, #372]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b5b      	ldr	r3, [pc, #364]	; (8001c10 <HAL_GPIO_Init+0x2f0>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aac:	4a59      	ldr	r2, [pc, #356]	; (8001c14 <HAL_GPIO_Init+0x2f4>)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ad6:	d025      	beq.n	8001b24 <HAL_GPIO_Init+0x204>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a4f      	ldr	r2, [pc, #316]	; (8001c18 <HAL_GPIO_Init+0x2f8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d01f      	beq.n	8001b20 <HAL_GPIO_Init+0x200>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a4e      	ldr	r2, [pc, #312]	; (8001c1c <HAL_GPIO_Init+0x2fc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d019      	beq.n	8001b1c <HAL_GPIO_Init+0x1fc>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a4d      	ldr	r2, [pc, #308]	; (8001c20 <HAL_GPIO_Init+0x300>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d013      	beq.n	8001b18 <HAL_GPIO_Init+0x1f8>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a4c      	ldr	r2, [pc, #304]	; (8001c24 <HAL_GPIO_Init+0x304>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00d      	beq.n	8001b14 <HAL_GPIO_Init+0x1f4>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a4b      	ldr	r2, [pc, #300]	; (8001c28 <HAL_GPIO_Init+0x308>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d007      	beq.n	8001b10 <HAL_GPIO_Init+0x1f0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a4a      	ldr	r2, [pc, #296]	; (8001c2c <HAL_GPIO_Init+0x30c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d101      	bne.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001b08:	2306      	movs	r3, #6
 8001b0a:	e00c      	b.n	8001b26 <HAL_GPIO_Init+0x206>
 8001b0c:	2307      	movs	r3, #7
 8001b0e:	e00a      	b.n	8001b26 <HAL_GPIO_Init+0x206>
 8001b10:	2305      	movs	r3, #5
 8001b12:	e008      	b.n	8001b26 <HAL_GPIO_Init+0x206>
 8001b14:	2304      	movs	r3, #4
 8001b16:	e006      	b.n	8001b26 <HAL_GPIO_Init+0x206>
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e004      	b.n	8001b26 <HAL_GPIO_Init+0x206>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e002      	b.n	8001b26 <HAL_GPIO_Init+0x206>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_GPIO_Init+0x206>
 8001b24:	2300      	movs	r3, #0
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	f002 0203 	and.w	r2, r2, #3
 8001b2c:	0092      	lsls	r2, r2, #2
 8001b2e:	4093      	lsls	r3, r2
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b36:	4937      	ldr	r1, [pc, #220]	; (8001c14 <HAL_GPIO_Init+0x2f4>)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b44:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <HAL_GPIO_Init+0x310>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b68:	4a31      	ldr	r2, [pc, #196]	; (8001c30 <HAL_GPIO_Init+0x310>)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b6e:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <HAL_GPIO_Init+0x310>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b92:	4a27      	ldr	r2, [pc, #156]	; (8001c30 <HAL_GPIO_Init+0x310>)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b98:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <HAL_GPIO_Init+0x310>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bbc:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <HAL_GPIO_Init+0x310>)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_GPIO_Init+0x310>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <HAL_GPIO_Init+0x310>)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f47f ae97 	bne.w	8001930 <HAL_GPIO_Init+0x10>
  }
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	371c      	adds	r7, #28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40010000 	.word	0x40010000
 8001c18:	48000400 	.word	0x48000400
 8001c1c:	48000800 	.word	0x48000800
 8001c20:	48000c00 	.word	0x48000c00
 8001c24:	48001000 	.word	0x48001000
 8001c28:	48001400 	.word	0x48001400
 8001c2c:	48001800 	.word	0x48001800
 8001c30:	40010400 	.word	0x40010400

08001c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e001      	b.n	8001c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
 8001c70:	4613      	mov	r3, r2
 8001c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c74:	787b      	ldrb	r3, [r7, #1]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c80:	e002      	b.n	8001c88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f000 bf01 	b.w	8002ab0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 8160 	beq.w	8001f7e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cbe:	4bae      	ldr	r3, [pc, #696]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d00c      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cca:	4bab      	ldr	r3, [pc, #684]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d159      	bne.n	8001d8a <HAL_RCC_OscConfig+0xf6>
 8001cd6:	4ba8      	ldr	r3, [pc, #672]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce2:	d152      	bne.n	8001d8a <HAL_RCC_OscConfig+0xf6>
 8001ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ce8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cf0:	fa93 f3a3 	rbit	r3, r3
 8001cf4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cf8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d102      	bne.n	8001d16 <HAL_RCC_OscConfig+0x82>
 8001d10:	4b99      	ldr	r3, [pc, #612]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	e015      	b.n	8001d42 <HAL_RCC_OscConfig+0xae>
 8001d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d1a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d32:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d3e:	4b8e      	ldr	r3, [pc, #568]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d46:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001d4a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001d4e:	fa92 f2a2 	rbit	r2, r2
 8001d52:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001d56:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001d5a:	fab2 f282 	clz	r2, r2
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	f042 0220 	orr.w	r2, r2, #32
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f002 021f 	and.w	r2, r2, #31
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8102 	beq.w	8001f7c <HAL_RCC_OscConfig+0x2e8>
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f040 80fc 	bne.w	8001f7c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	f000 be93 	b.w	8002ab0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d94:	d106      	bne.n	8001da4 <HAL_RCC_OscConfig+0x110>
 8001d96:	4b78      	ldr	r3, [pc, #480]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a77      	ldr	r2, [pc, #476]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e030      	b.n	8001e06 <HAL_RCC_OscConfig+0x172>
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x134>
 8001dae:	4b72      	ldr	r3, [pc, #456]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a71      	ldr	r2, [pc, #452]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a6e      	ldr	r2, [pc, #440]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e01e      	b.n	8001e06 <HAL_RCC_OscConfig+0x172>
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_OscConfig+0x15a>
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a67      	ldr	r2, [pc, #412]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001dda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b65      	ldr	r3, [pc, #404]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a64      	ldr	r2, [pc, #400]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e00b      	b.n	8001e06 <HAL_RCC_OscConfig+0x172>
 8001dee:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a61      	ldr	r2, [pc, #388]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b5f      	ldr	r3, [pc, #380]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a5e      	ldr	r2, [pc, #376]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e04:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d059      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fc70 	bl	80016f4 <HAL_GetTick>
 8001e14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e1a:	f7ff fc6b 	bl	80016f4 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d902      	bls.n	8001e30 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f000 be40 	b.w	8002ab0 <HAL_RCC_OscConfig+0xe1c>
 8001e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e34:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001e44:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d102      	bne.n	8001e62 <HAL_RCC_OscConfig+0x1ce>
 8001e5c:	4b46      	ldr	r3, [pc, #280]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	e015      	b.n	8001e8e <HAL_RCC_OscConfig+0x1fa>
 8001e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e66:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001e76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e7a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001e7e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e92:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001e96:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001e9a:	fa92 f2a2 	rbit	r2, r2
 8001e9e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001ea2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ea6:	fab2 f282 	clz	r2, r2
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	f042 0220 	orr.w	r2, r2, #32
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f002 021f 	and.w	r2, r2, #31
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0ab      	beq.n	8001e1a <HAL_RCC_OscConfig+0x186>
 8001ec2:	e05c      	b.n	8001f7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fc16 	bl	80016f4 <HAL_GetTick>
 8001ec8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ece:	f7ff fc11 	bl	80016f4 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d902      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	f000 bde6 	b.w	8002ab0 <HAL_RCC_OscConfig+0xe1c>
 8001ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001ef8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efc:	fab3 f383 	clz	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d102      	bne.n	8001f16 <HAL_RCC_OscConfig+0x282>
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	e015      	b.n	8001f42 <HAL_RCC_OscConfig+0x2ae>
 8001f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f1a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001f2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f2e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f32:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_RCC_OscConfig+0x2e4>)
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f46:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001f4a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001f4e:	fa92 f2a2 	rbit	r2, r2
 8001f52:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001f56:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f5a:	fab2 f282 	clz	r2, r2
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	f042 0220 	orr.w	r2, r2, #32
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	f002 021f 	and.w	r2, r2, #31
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ab      	bne.n	8001ece <HAL_RCC_OscConfig+0x23a>
 8001f76:	e002      	b.n	8001f7e <HAL_RCC_OscConfig+0x2ea>
 8001f78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 8170 	beq.w	800226e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f8e:	4bd0      	ldr	r3, [pc, #832]	; (80022d0 <HAL_RCC_OscConfig+0x63c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f9a:	4bcd      	ldr	r3, [pc, #820]	; (80022d0 <HAL_RCC_OscConfig+0x63c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d16d      	bne.n	8002082 <HAL_RCC_OscConfig+0x3ee>
 8001fa6:	4bca      	ldr	r3, [pc, #808]	; (80022d0 <HAL_RCC_OscConfig+0x63c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb2:	d166      	bne.n	8002082 <HAL_RCC_OscConfig+0x3ee>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001fc6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	fab3 f383 	clz	r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d102      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x350>
 8001fde:	4bbc      	ldr	r3, [pc, #752]	; (80022d0 <HAL_RCC_OscConfig+0x63c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	e013      	b.n	800200c <HAL_RCC_OscConfig+0x378>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ffc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002008:	4bb1      	ldr	r3, [pc, #708]	; (80022d0 <HAL_RCC_OscConfig+0x63c>)
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	2202      	movs	r2, #2
 800200e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002012:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002016:	fa92 f2a2 	rbit	r2, r2
 800201a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800201e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002022:	fab2 f282 	clz	r2, r2
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	f042 0220 	orr.w	r2, r2, #32
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	f002 021f 	and.w	r2, r2, #31
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f202 	lsl.w	r2, r1, r2
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_RCC_OscConfig+0x3ba>
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d002      	beq.n	800204e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	f000 bd31 	b.w	8002ab0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	4ba0      	ldr	r3, [pc, #640]	; (80022d0 <HAL_RCC_OscConfig+0x63c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	21f8      	movs	r1, #248	; 0xf8
 800205e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002066:	fa91 f1a1 	rbit	r1, r1
 800206a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800206e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002072:	fab1 f181 	clz	r1, r1
 8002076:	b2c9      	uxtb	r1, r1
 8002078:	408b      	lsls	r3, r1
 800207a:	4995      	ldr	r1, [pc, #596]	; (80022d0 <HAL_RCC_OscConfig+0x63c>)
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002080:	e0f5      	b.n	800226e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8085 	beq.w	8002198 <HAL_RCC_OscConfig+0x504>
 800208e:	2301      	movs	r3, #1
 8002090:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80020a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a4:	fab3 f383 	clz	r3, r3
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	461a      	mov	r2, r3
 80020b6:	2301      	movs	r3, #1
 80020b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7ff fb1b 	bl	80016f4 <HAL_GetTick>
 80020be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c4:	f7ff fb16 	bl	80016f4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d902      	bls.n	80020da <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	f000 bceb 	b.w	8002ab0 <HAL_RCC_OscConfig+0xe1c>
 80020da:	2302      	movs	r3, #2
 80020dc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80020ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	fab3 f383 	clz	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d102      	bne.n	800210a <HAL_RCC_OscConfig+0x476>
 8002104:	4b72      	ldr	r3, [pc, #456]	; (80022d0 <HAL_RCC_OscConfig+0x63c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	e013      	b.n	8002132 <HAL_RCC_OscConfig+0x49e>
 800210a:	2302      	movs	r3, #2
 800210c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800211c:	2302      	movs	r3, #2
 800211e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002122:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800212e:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <HAL_RCC_OscConfig+0x63c>)
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	2202      	movs	r2, #2
 8002134:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002138:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800213c:	fa92 f2a2 	rbit	r2, r2
 8002140:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002144:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002148:	fab2 f282 	clz	r2, r2
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	f042 0220 	orr.w	r2, r2, #32
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f002 021f 	and.w	r2, r2, #31
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0af      	beq.n	80020c4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002164:	4b5a      	ldr	r3, [pc, #360]	; (80022d0 <HAL_RCC_OscConfig+0x63c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	21f8      	movs	r1, #248	; 0xf8
 8002174:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800217c:	fa91 f1a1 	rbit	r1, r1
 8002180:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002184:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002188:	fab1 f181 	clz	r1, r1
 800218c:	b2c9      	uxtb	r1, r1
 800218e:	408b      	lsls	r3, r1
 8002190:	494f      	ldr	r1, [pc, #316]	; (80022d0 <HAL_RCC_OscConfig+0x63c>)
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
 8002196:	e06a      	b.n	800226e <HAL_RCC_OscConfig+0x5da>
 8002198:	2301      	movs	r3, #1
 800219a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80021aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	461a      	mov	r2, r3
 80021c0:	2300      	movs	r3, #0
 80021c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff fa96 	bl	80016f4 <HAL_GetTick>
 80021c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ce:	f7ff fa91 	bl	80016f4 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d902      	bls.n	80021e4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	f000 bc66 	b.w	8002ab0 <HAL_RCC_OscConfig+0xe1c>
 80021e4:	2302      	movs	r3, #2
 80021e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80021f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <HAL_RCC_OscConfig+0x580>
 800220e:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_RCC_OscConfig+0x63c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	e013      	b.n	800223c <HAL_RCC_OscConfig+0x5a8>
 8002214:	2302      	movs	r3, #2
 8002216:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002226:	2302      	movs	r3, #2
 8002228:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800222c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002230:	fa93 f3a3 	rbit	r3, r3
 8002234:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_RCC_OscConfig+0x63c>)
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	2202      	movs	r2, #2
 800223e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002242:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002246:	fa92 f2a2 	rbit	r2, r2
 800224a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800224e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002252:	fab2 f282 	clz	r2, r2
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	f042 0220 	orr.w	r2, r2, #32
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	f002 021f 	and.w	r2, r2, #31
 8002262:	2101      	movs	r1, #1
 8002264:	fa01 f202 	lsl.w	r2, r1, r2
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1af      	bne.n	80021ce <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80da 	beq.w	8002432 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d069      	beq.n	800235c <HAL_RCC_OscConfig+0x6c8>
 8002288:	2301      	movs	r3, #1
 800228a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800229a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCC_OscConfig+0x640>)
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	461a      	mov	r2, r3
 80022ae:	2301      	movs	r3, #1
 80022b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b2:	f7ff fa1f 	bl	80016f4 <HAL_GetTick>
 80022b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ba:	e00d      	b.n	80022d8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022bc:	f7ff fa1a 	bl	80016f4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d905      	bls.n	80022d8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e3ef      	b.n	8002ab0 <HAL_RCC_OscConfig+0xe1c>
 80022d0:	40021000 	.word	0x40021000
 80022d4:	10908120 	.word	0x10908120
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022e2:	fa93 f2a3 	rbit	r2, r3
 80022e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80022f0:	2202      	movs	r2, #2
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f2a3 	rbit	r2, r3
 80022fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002308:	2202      	movs	r2, #2
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	fa93 f2a3 	rbit	r2, r3
 8002316:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800231a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231c:	4ba4      	ldr	r3, [pc, #656]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 800231e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002320:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002324:	2102      	movs	r1, #2
 8002326:	6019      	str	r1, [r3, #0]
 8002328:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	fa93 f1a3 	rbit	r1, r3
 8002332:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002336:	6019      	str	r1, [r3, #0]
  return result;
 8002338:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2101      	movs	r1, #1
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0b0      	beq.n	80022bc <HAL_RCC_OscConfig+0x628>
 800235a:	e06a      	b.n	8002432 <HAL_RCC_OscConfig+0x79e>
 800235c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	fa93 f2a3 	rbit	r2, r3
 800236e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002372:	601a      	str	r2, [r3, #0]
  return result;
 8002374:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002378:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	4b8c      	ldr	r3, [pc, #560]	; (80025b4 <HAL_RCC_OscConfig+0x920>)
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	461a      	mov	r2, r3
 800238a:	2300      	movs	r3, #0
 800238c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238e:	f7ff f9b1 	bl	80016f4 <HAL_GetTick>
 8002392:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002396:	e009      	b.n	80023ac <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002398:	f7ff f9ac 	bl	80016f4 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e381      	b.n	8002ab0 <HAL_RCC_OscConfig+0xe1c>
 80023ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023b0:	2202      	movs	r2, #2
 80023b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fa93 f2a3 	rbit	r2, r3
 80023be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023c8:	2202      	movs	r2, #2
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	fa93 f2a3 	rbit	r2, r3
 80023d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023e0:	2202      	movs	r2, #2
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	fa93 f2a3 	rbit	r2, r3
 80023ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80023f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	4b6e      	ldr	r3, [pc, #440]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 80023f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023fc:	2102      	movs	r1, #2
 80023fe:	6019      	str	r1, [r3, #0]
 8002400:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	fa93 f1a3 	rbit	r1, r3
 800240a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800240e:	6019      	str	r1, [r3, #0]
  return result;
 8002410:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	2101      	movs	r1, #1
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1b2      	bne.n	8002398 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8157 	beq.w	80026f0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002442:	2300      	movs	r3, #0
 8002444:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002448:	4b59      	ldr	r3, [pc, #356]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d112      	bne.n	800247a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002454:	4b56      	ldr	r3, [pc, #344]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	4a55      	ldr	r2, [pc, #340]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 800245a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245e:	61d3      	str	r3, [r2, #28]
 8002460:	4b53      	ldr	r3, [pc, #332]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002468:	f107 030c 	add.w	r3, r7, #12
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	f107 030c 	add.w	r3, r7, #12
 8002472:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <HAL_RCC_OscConfig+0x924>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d11a      	bne.n	80024bc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <HAL_RCC_OscConfig+0x924>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a4b      	ldr	r2, [pc, #300]	; (80025b8 <HAL_RCC_OscConfig+0x924>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7ff f92f 	bl	80016f4 <HAL_GetTick>
 8002496:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249a:	e009      	b.n	80024b0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249c:	f7ff f92a 	bl	80016f4 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b64      	cmp	r3, #100	; 0x64
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e2ff      	b.n	8002ab0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCC_OscConfig+0x924>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ef      	beq.n	800249c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d106      	bne.n	80024d4 <HAL_RCC_OscConfig+0x840>
 80024c6:	4b3a      	ldr	r3, [pc, #232]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a39      	ldr	r2, [pc, #228]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	e02f      	b.n	8002534 <HAL_RCC_OscConfig+0x8a0>
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x864>
 80024de:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a33      	ldr	r2, [pc, #204]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a30      	ldr	r2, [pc, #192]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 80024f0:	f023 0304 	bic.w	r3, r3, #4
 80024f4:	6213      	str	r3, [r2, #32]
 80024f6:	e01d      	b.n	8002534 <HAL_RCC_OscConfig+0x8a0>
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0x888>
 8002502:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4a2a      	ldr	r2, [pc, #168]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	6213      	str	r3, [r2, #32]
 800250e:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a27      	ldr	r2, [pc, #156]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6213      	str	r3, [r2, #32]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0x8a0>
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 8002522:	f023 0301 	bic.w	r3, r3, #1
 8002526:	6213      	str	r3, [r2, #32]
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4a20      	ldr	r2, [pc, #128]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 800252e:	f023 0304 	bic.w	r3, r3, #4
 8002532:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d06a      	beq.n	8002614 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7ff f8d9 	bl	80016f4 <HAL_GetTick>
 8002542:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002548:	f7ff f8d4 	bl	80016f4 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	; 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e2a7      	b.n	8002ab0 <HAL_RCC_OscConfig+0xe1c>
 8002560:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002564:	2202      	movs	r2, #2
 8002566:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	fa93 f2a3 	rbit	r2, r3
 8002572:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800257c:	2202      	movs	r2, #2
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	fa93 f2a3 	rbit	r2, r3
 800258a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800258e:	601a      	str	r2, [r3, #0]
  return result;
 8002590:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002594:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d108      	bne.n	80025bc <HAL_RCC_OscConfig+0x928>
 80025aa:	4b01      	ldr	r3, [pc, #4]	; (80025b0 <HAL_RCC_OscConfig+0x91c>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	e013      	b.n	80025d8 <HAL_RCC_OscConfig+0x944>
 80025b0:	40021000 	.word	0x40021000
 80025b4:	10908120 	.word	0x10908120
 80025b8:	40007000 	.word	0x40007000
 80025bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025c0:	2202      	movs	r2, #2
 80025c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	fa93 f2a3 	rbit	r2, r3
 80025ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	4bc0      	ldr	r3, [pc, #768]	; (80028d8 <HAL_RCC_OscConfig+0xc44>)
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80025dc:	2102      	movs	r1, #2
 80025de:	6011      	str	r1, [r2, #0]
 80025e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	fa92 f1a2 	rbit	r1, r2
 80025ea:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80025ee:	6011      	str	r1, [r2, #0]
  return result;
 80025f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	fab2 f282 	clz	r2, r2
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f002 021f 	and.w	r2, r2, #31
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f202 	lsl.w	r2, r1, r2
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d09a      	beq.n	8002548 <HAL_RCC_OscConfig+0x8b4>
 8002612:	e063      	b.n	80026dc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002614:	f7ff f86e 	bl	80016f4 <HAL_GetTick>
 8002618:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261c:	e00b      	b.n	8002636 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7ff f869 	bl	80016f4 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e23c      	b.n	8002ab0 <HAL_RCC_OscConfig+0xe1c>
 8002636:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800263a:	2202      	movs	r2, #2
 800263c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	fa93 f2a3 	rbit	r2, r3
 8002648:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002652:	2202      	movs	r2, #2
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fa93 f2a3 	rbit	r2, r3
 8002660:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002664:	601a      	str	r2, [r3, #0]
  return result;
 8002666:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800266a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f043 0302 	orr.w	r3, r3, #2
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d102      	bne.n	8002686 <HAL_RCC_OscConfig+0x9f2>
 8002680:	4b95      	ldr	r3, [pc, #596]	; (80028d8 <HAL_RCC_OscConfig+0xc44>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	e00d      	b.n	80026a2 <HAL_RCC_OscConfig+0xa0e>
 8002686:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800268a:	2202      	movs	r2, #2
 800268c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	fa93 f2a3 	rbit	r2, r3
 8002698:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	4b8e      	ldr	r3, [pc, #568]	; (80028d8 <HAL_RCC_OscConfig+0xc44>)
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80026a6:	2102      	movs	r1, #2
 80026a8:	6011      	str	r1, [r2, #0]
 80026aa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	fa92 f1a2 	rbit	r1, r2
 80026b4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80026b8:	6011      	str	r1, [r2, #0]
  return result;
 80026ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	fab2 f282 	clz	r2, r2
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	f002 021f 	and.w	r2, r2, #31
 80026d0:	2101      	movs	r1, #1
 80026d2:	fa01 f202 	lsl.w	r2, r1, r2
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1a0      	bne.n	800261e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026dc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e4:	4b7c      	ldr	r3, [pc, #496]	; (80028d8 <HAL_RCC_OscConfig+0xc44>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	4a7b      	ldr	r2, [pc, #492]	; (80028d8 <HAL_RCC_OscConfig+0xc44>)
 80026ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 81d9 	beq.w	8002aae <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026fc:	4b76      	ldr	r3, [pc, #472]	; (80028d8 <HAL_RCC_OscConfig+0xc44>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	f000 81a6 	beq.w	8002a56 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800270a:	1d3b      	adds	r3, r7, #4
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b02      	cmp	r3, #2
 8002712:	f040 811e 	bne.w	8002952 <HAL_RCC_OscConfig+0xcbe>
 8002716:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800271a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800271e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	fa93 f2a3 	rbit	r2, r3
 800272a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800272e:	601a      	str	r2, [r3, #0]
  return result;
 8002730:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002734:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002740:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	461a      	mov	r2, r3
 8002748:	2300      	movs	r3, #0
 800274a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe ffd2 	bl	80016f4 <HAL_GetTick>
 8002750:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002754:	e009      	b.n	800276a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002756:	f7fe ffcd 	bl	80016f4 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1a2      	b.n	8002ab0 <HAL_RCC_OscConfig+0xe1c>
 800276a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800276e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	fa93 f2a3 	rbit	r2, r3
 800277e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002782:	601a      	str	r2, [r3, #0]
  return result;
 8002784:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002788:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	b2db      	uxtb	r3, r3
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d102      	bne.n	80027a4 <HAL_RCC_OscConfig+0xb10>
 800279e:	4b4e      	ldr	r3, [pc, #312]	; (80028d8 <HAL_RCC_OscConfig+0xc44>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e01b      	b.n	80027dc <HAL_RCC_OscConfig+0xb48>
 80027a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	fa93 f2a3 	rbit	r2, r3
 80027b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	fa93 f2a3 	rbit	r2, r3
 80027d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	4b3f      	ldr	r3, [pc, #252]	; (80028d8 <HAL_RCC_OscConfig+0xc44>)
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80027e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027e4:	6011      	str	r1, [r2, #0]
 80027e6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	fa92 f1a2 	rbit	r1, r2
 80027f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80027f4:	6011      	str	r1, [r2, #0]
  return result;
 80027f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	fab2 f282 	clz	r2, r2
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f042 0220 	orr.w	r2, r2, #32
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	f002 021f 	and.w	r2, r2, #31
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d19e      	bne.n	8002756 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002818:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <HAL_RCC_OscConfig+0xc44>)
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	f023 020f 	bic.w	r2, r3, #15
 8002820:	1d3b      	adds	r3, r7, #4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	492c      	ldr	r1, [pc, #176]	; (80028d8 <HAL_RCC_OscConfig+0xc44>)
 8002828:	4313      	orrs	r3, r2
 800282a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800282c:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <HAL_RCC_OscConfig+0xc44>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6a19      	ldr	r1, [r3, #32]
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	430b      	orrs	r3, r1
 8002842:	4925      	ldr	r1, [pc, #148]	; (80028d8 <HAL_RCC_OscConfig+0xc44>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
 8002848:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800284c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	fa93 f2a3 	rbit	r2, r3
 800285c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002860:	601a      	str	r2, [r3, #0]
  return result;
 8002862:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002866:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002872:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	461a      	mov	r2, r3
 800287a:	2301      	movs	r3, #1
 800287c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe ff39 	bl	80016f4 <HAL_GetTick>
 8002882:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002886:	e009      	b.n	800289c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe ff34 	bl	80016f4 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e109      	b.n	8002ab0 <HAL_RCC_OscConfig+0xe1c>
 800289c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	fa93 f2a3 	rbit	r2, r3
 80028b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028b4:	601a      	str	r2, [r3, #0]
  return result;
 80028b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d105      	bne.n	80028dc <HAL_RCC_OscConfig+0xc48>
 80028d0:	4b01      	ldr	r3, [pc, #4]	; (80028d8 <HAL_RCC_OscConfig+0xc44>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	e01e      	b.n	8002914 <HAL_RCC_OscConfig+0xc80>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	fa93 f2a3 	rbit	r2, r3
 80028f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	fa93 f2a3 	rbit	r2, r3
 800290a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_OscConfig+0xe28>)
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002918:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800291c:	6011      	str	r1, [r2, #0]
 800291e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	fa92 f1a2 	rbit	r1, r2
 8002928:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800292c:	6011      	str	r1, [r2, #0]
  return result;
 800292e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	fab2 f282 	clz	r2, r2
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	f042 0220 	orr.w	r2, r2, #32
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	f002 021f 	and.w	r2, r2, #31
 8002944:	2101      	movs	r1, #1
 8002946:	fa01 f202 	lsl.w	r2, r1, r2
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d09b      	beq.n	8002888 <HAL_RCC_OscConfig+0xbf4>
 8002950:	e0ad      	b.n	8002aae <HAL_RCC_OscConfig+0xe1a>
 8002952:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002956:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800295a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	fa93 f2a3 	rbit	r2, r3
 8002966:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800296a:	601a      	str	r2, [r3, #0]
  return result;
 800296c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002970:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800297c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	461a      	mov	r2, r3
 8002984:	2300      	movs	r3, #0
 8002986:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe feb4 	bl	80016f4 <HAL_GetTick>
 800298c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002990:	e009      	b.n	80029a6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002992:	f7fe feaf 	bl	80016f4 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e084      	b.n	8002ab0 <HAL_RCC_OscConfig+0xe1c>
 80029a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	fa93 f2a3 	rbit	r2, r3
 80029ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029be:	601a      	str	r2, [r3, #0]
  return result;
 80029c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d102      	bne.n	80029e0 <HAL_RCC_OscConfig+0xd4c>
 80029da:	4b38      	ldr	r3, [pc, #224]	; (8002abc <HAL_RCC_OscConfig+0xe28>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	e01b      	b.n	8002a18 <HAL_RCC_OscConfig+0xd84>
 80029e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fa93 f2a3 	rbit	r2, r3
 80029f4:	f107 0320 	add.w	r3, r7, #32
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	f107 031c 	add.w	r3, r7, #28
 80029fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	fa93 f2a3 	rbit	r2, r3
 8002a0e:	f107 0318 	add.w	r3, r7, #24
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	4b29      	ldr	r3, [pc, #164]	; (8002abc <HAL_RCC_OscConfig+0xe28>)
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	f107 0214 	add.w	r2, r7, #20
 8002a1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a20:	6011      	str	r1, [r2, #0]
 8002a22:	f107 0214 	add.w	r2, r7, #20
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	fa92 f1a2 	rbit	r1, r2
 8002a2c:	f107 0210 	add.w	r2, r7, #16
 8002a30:	6011      	str	r1, [r2, #0]
  return result;
 8002a32:	f107 0210 	add.w	r2, r7, #16
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	fab2 f282 	clz	r2, r2
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	f042 0220 	orr.w	r2, r2, #32
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	f002 021f 	and.w	r2, r2, #31
 8002a48:	2101      	movs	r1, #1
 8002a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d19e      	bne.n	8002992 <HAL_RCC_OscConfig+0xcfe>
 8002a54:	e02b      	b.n	8002aae <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e025      	b.n	8002ab0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a64:	4b15      	ldr	r3, [pc, #84]	; (8002abc <HAL_RCC_OscConfig+0xe28>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_RCC_OscConfig+0xe28>)
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002a78:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d111      	bne.n	8002aaa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002a86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002a8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d108      	bne.n	8002aaa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002a98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a9c:	f003 020f 	and.w	r2, r3, #15
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b09e      	sub	sp, #120	; 0x78
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e162      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b90      	ldr	r3, [pc, #576]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d910      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b8d      	ldr	r3, [pc, #564]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 0207 	bic.w	r2, r3, #7
 8002aee:	498b      	ldr	r1, [pc, #556]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b89      	ldr	r3, [pc, #548]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e14a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b82      	ldr	r3, [pc, #520]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	497f      	ldr	r1, [pc, #508]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80dc 	beq.w	8002cec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d13c      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xf6>
 8002b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xa6>
 8002b60:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	e00f      	b.n	8002b86 <HAL_RCC_ClockConfig+0xc6>
 8002b66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	667b      	str	r3, [r7, #100]	; 0x64
 8002b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b78:	663b      	str	r3, [r7, #96]	; 0x60
 8002b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b82:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b8e:	fa92 f2a2 	rbit	r2, r2
 8002b92:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b96:	fab2 f282 	clz	r2, r2
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f042 0220 	orr.w	r2, r2, #32
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	f002 021f 	and.w	r2, r2, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d17b      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e0f3      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d13c      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x178>
 8002bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x128>
 8002be2:	4b4f      	ldr	r3, [pc, #316]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e00f      	b.n	8002c08 <HAL_RCC_ClockConfig+0x148>
 8002be8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bfa:	643b      	str	r3, [r7, #64]	; 0x40
 8002bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c04:	4b46      	ldr	r3, [pc, #280]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c10:	fa92 f2a2 	rbit	r2, r2
 8002c14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c18:	fab2 f282 	clz	r2, r2
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	f042 0220 	orr.w	r2, r2, #32
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	f002 021f 	and.w	r2, r2, #31
 8002c28:	2101      	movs	r1, #1
 8002c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d13a      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0b2      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x1a0>
 8002c5a:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	e00d      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1bc>
 8002c60:	2302      	movs	r3, #2
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	61ba      	str	r2, [r7, #24]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	fa92 f2a2 	rbit	r2, r2
 8002c86:	617a      	str	r2, [r7, #20]
  return result;
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	f002 021f 	and.w	r2, r2, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e079      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	491a      	ldr	r1, [pc, #104]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe fd1a 	bl	80016f4 <HAL_GetTick>
 8002cc0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fe fd16 	bl	80016f4 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e061      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d214      	bcs.n	8002d24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0207 	bic.w	r2, r3, #7
 8002d02:	4906      	ldr	r1, [pc, #24]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e040      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	491a      	ldr	r1, [pc, #104]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4912      	ldr	r1, [pc, #72]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d62:	f000 f845 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002d66:	4601      	mov	r1, r0
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d70:	22f0      	movs	r2, #240	; 0xf0
 8002d72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	fa92 f2a2 	rbit	r2, r2
 8002d7a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	40d3      	lsrs	r3, r2
 8002d86:	4a09      	ldr	r2, [pc, #36]	; (8002dac <HAL_RCC_ClockConfig+0x2ec>)
 8002d88:	5cd3      	ldrb	r3, [r2, r3]
 8002d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d8e:	4a08      	ldr	r2, [pc, #32]	; (8002db0 <HAL_RCC_ClockConfig+0x2f0>)
 8002d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <HAL_RCC_ClockConfig+0x2f4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fc68 	bl	800166c <HAL_InitTick>
  
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3778      	adds	r7, #120	; 0x78
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08003158 	.word	0x08003158
 8002db0:	20000000 	.word	0x20000000
 8002db4:	20000004 	.word	0x20000004

08002db8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002dc2:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	603b      	str	r3, [r7, #0]
  return result;
 8002dcc:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dd8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	461a      	mov	r2, r3
 8002de0:	2301      	movs	r3, #1
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b08b      	sub	sp, #44	; 0x2c
 8002df4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e0a:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d002      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x30>
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_GetSysClockFreq+0x36>
 8002e1e:	e03f      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e20:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e22:	623b      	str	r3, [r7, #32]
      break;
 8002e24:	e03f      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e2c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e30:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	fa92 f2a2 	rbit	r2, r2
 8002e38:	607a      	str	r2, [r7, #4]
  return result;
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	fab2 f282 	clz	r2, r2
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	40d3      	lsrs	r3, r2
 8002e44:	4a1d      	ldr	r2, [pc, #116]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e46:	5cd3      	ldrb	r3, [r2, r3]
 8002e48:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	220f      	movs	r2, #15
 8002e54:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	fa92 f2a2 	rbit	r2, r2
 8002e5c:	60fa      	str	r2, [r7, #12]
  return result;
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	fab2 f282 	clz	r2, r2
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	40d3      	lsrs	r3, r2
 8002e68:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e6a:	5cd3      	ldrb	r3, [r2, r3]
 8002e6c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e78:	4a0f      	ldr	r2, [pc, #60]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
 8002e88:	e007      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e8a:	4a0b      	ldr	r2, [pc, #44]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	fb02 f303 	mul.w	r3, r2, r3
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	623b      	str	r3, [r7, #32]
      break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ea2:	623b      	str	r3, [r7, #32]
      break;
 8002ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	372c      	adds	r7, #44	; 0x2c
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	007a1200 	.word	0x007a1200
 8002ebc:	08003168 	.word	0x08003168
 8002ec0:	08003178 	.word	0x08003178

08002ec4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed0:	2b80      	cmp	r3, #128	; 0x80
 8002ed2:	d104      	bne.n	8002ede <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002ed4:	f000 f80a 	bl	8002eec <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002eda:	2280      	movs	r2, #128	; 0x80
 8002edc:	701a      	strb	r2, [r3, #0]
  }
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	4002100a 	.word	0x4002100a

08002eec <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <__libc_init_array>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	4d0d      	ldr	r5, [pc, #52]	; (8002f34 <__libc_init_array+0x38>)
 8002f00:	4c0d      	ldr	r4, [pc, #52]	; (8002f38 <__libc_init_array+0x3c>)
 8002f02:	1b64      	subs	r4, r4, r5
 8002f04:	10a4      	asrs	r4, r4, #2
 8002f06:	2600      	movs	r6, #0
 8002f08:	42a6      	cmp	r6, r4
 8002f0a:	d109      	bne.n	8002f20 <__libc_init_array+0x24>
 8002f0c:	4d0b      	ldr	r5, [pc, #44]	; (8002f3c <__libc_init_array+0x40>)
 8002f0e:	4c0c      	ldr	r4, [pc, #48]	; (8002f40 <__libc_init_array+0x44>)
 8002f10:	f000 f820 	bl	8002f54 <_init>
 8002f14:	1b64      	subs	r4, r4, r5
 8002f16:	10a4      	asrs	r4, r4, #2
 8002f18:	2600      	movs	r6, #0
 8002f1a:	42a6      	cmp	r6, r4
 8002f1c:	d105      	bne.n	8002f2a <__libc_init_array+0x2e>
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
 8002f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f24:	4798      	blx	r3
 8002f26:	3601      	adds	r6, #1
 8002f28:	e7ee      	b.n	8002f08 <__libc_init_array+0xc>
 8002f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f2e:	4798      	blx	r3
 8002f30:	3601      	adds	r6, #1
 8002f32:	e7f2      	b.n	8002f1a <__libc_init_array+0x1e>
 8002f34:	08003188 	.word	0x08003188
 8002f38:	08003188 	.word	0x08003188
 8002f3c:	08003188 	.word	0x08003188
 8002f40:	0800318c 	.word	0x0800318c

08002f44 <memset>:
 8002f44:	4402      	add	r2, r0
 8002f46:	4603      	mov	r3, r0
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d100      	bne.n	8002f4e <memset+0xa>
 8002f4c:	4770      	bx	lr
 8002f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f52:	e7f9      	b.n	8002f48 <memset+0x4>

08002f54 <_init>:
 8002f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f56:	bf00      	nop
 8002f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5a:	bc08      	pop	{r3}
 8002f5c:	469e      	mov	lr, r3
 8002f5e:	4770      	bx	lr

08002f60 <_fini>:
 8002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f62:	bf00      	nop
 8002f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f66:	bc08      	pop	{r3}
 8002f68:	469e      	mov	lr, r3
 8002f6a:	4770      	bx	lr
